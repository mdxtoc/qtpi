
proc Alice(n:int, r:^bit, qB, bsB) = 
  (new chosen) (  AliceChoose (n,[],r,chosen)
                | chosen?(bvs) . 
                  {print_strings ["Alice chose "; string_of_value bvs; "\n"]} .
                  AliceSend (bvs, qB, bsB)
               )

(* choose n basis,bit pairs *)
proc AliceChoose(n, bvs, r, chosen) =
    if n=0 then chosen!bvs . _0
           else r?(b) . r?(v) . AliceChoose(n-1,(b,v)::bvs,r,chosen)
    fi

proc AliceSend(bvs, qB, bsB) =
    (new done) (  AliceSendBits (bvs,qB,done)
                | done?(s) . AliceNegotiate (bvs,bsB)
               )

(* send encoded bits down channel qB *)
proc AliceSendBits (bvs,qB,done) =   
    match bvs .
        []         . done!() . _0
    <+> (b,v)::bvs . (newq q = match b,v .
                                   0b0,0b0 . |0> 
                               <+> 0b0,0b1 . |1> 
                               <+> 0b1,0b0 . |+> 
                               <+> 0b1,0b1 . |-> 
                               hctam
                     )
                     qB!q.
                     AliceSendBits(bvs,qB,done)
    hctam

proc AliceNegotiate (bvs,bsB) =
    bsB!map fst bvs . (* send him my bases *)
    bsB?(bBs)       . (* receive his bases *)
    {print_strings ["Bob sent bases "; string_of_value bBs; "\n"]} .
    (new done) (  Reconcile (bBs, bvs, [], done)
                | done?(vs) . (* vs are the values we should agree upon *)
                  {print_strings ["Alice reconciled "; string_of_value vs; "\n"]} .
                  bsB?(vBs) . (* vBs are the bits to check, from vs *)
                  {print_strings ["Bob sent check bits "; string_of_value vBs; "\n"]} .
                  (new done) (AliceCheck (vBs, vs, done)
                              | done?(s) . Good (drop (length vBs) vs)
                             )
               )
    
proc AliceCheck (vBs, vs, done) =
  match vBs, vs .
      []    , _       . done!() . _0
  <+> v::vBs, v'::vs  . if v=v' then AliceCheck (vBs, vs, done) else Bad () fi
  <+> _               . Bad ()
  hctam

proc Reconcile (bBs,bvs,vs,done) =
  match bBs, bvs .
       []     , []         . (done!rev vs . _0)
   <+> bB::bBs, (b,v)::bvs . Reconcile (bBs, bvs, if bB=b then v::vs else vs fi, done)
   <+> _                   . Stop (["Reconcile failure"])
   hctam
  
proc Stop (ss) = {print_strings (ss @ ["\n"])} . _0

proc Bad () = Stop (["interference detected -- everything stops"])
proc Good (vs) = Stop (["Alice's code is "; string_of_value vs])

proc Bob(n:int, r:^bit, qA, bsA) = 
    (new done) (  BobReceive(n,[],qA,r,done)
                | done?(bvs)      . (* bvs is what I saw *)
                  {print_strings ["Bob saw "; string_of_value bvs; "\n"]} .
                  bsA?(bAs)       . (* receive her bases *)
                  {print_strings ["Alice sent bases "; string_of_value bAs; "\n"]} .
                  bsA!map fst bvs . (* send my bases *)
                  (new done) (  Reconcile (bAs,bvs,[],done)
                              | done?(vs) . (* the bits we agree on *)
                                {print_strings ["Bob reconciled "; string_of_value vs; "\n"]} .
                                (let checklength = (length vs)/4)
                                bsA!take checklength vs . (* send her a sample *)
                                (let code = drop checklength vs)
                                {print_strings ["Bob's code is "; string_of_value code; "\n"]} .                                
                                _0
                             )
               )

(* receive qbits down qA, measure them, record the results *)
proc BobReceive(n,bvs,qA,r,done) =
    if n=0 then done!rev bvs . _0
    else qA?(q) .
         r?(basis) .
         q =?[if basis=0b1 then _H else _I fi] (value) .
         dispose!q .
         BobReceive(n-1,(basis,value)::bvs,qA,r,done)
    fi
       
(* a source of random bits. A bit of a joke, but relatively harmless *)
proc Random(q:qbit, r:^bit) = q>>_H . q=?(v) . r!v . Random(q,r)

proc System() = (let n = read_int "number of qbits")
                (new r,qc,bsc)
                (Alice(n,r,qc,bsc) | Bob(n,r,qc,bsc) | (newq q = |0>) Random(q,r))
