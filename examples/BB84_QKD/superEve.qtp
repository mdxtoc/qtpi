(* a very sophisticated eavesdropper. Plays Bob to Alice, Alice to Bob. Knows that 
   Alice generates more code bits than she strictly needs.
 *)

proc Eve (qcA, qcB, bcA, bcB, againA, againB, logasB, logasA) =
  (new copied)
  (  CopyBits ([], qcA, qcB, bcA, copied)  
   | copied?(bs) . copied?(vs) . copied?(bases) .
     (new mc, init)
     (  init!bs . init!vs . init!bases . _0
      | AsBob (init, qcA, bcA, againA, mc, logasB)
      | AsAlice (bs, vs, qcB, bcB, againB, mc, logasA)
     )
  )
  
proc AsBob (received, qcA, bcA, againA, mc, log) =
  received?(bs) . received?(vs)                 .
  received?(basesA)                             .

  bcA!bs                                        .   (* send Alice my bases *)
  (* do a Bob-style calculation of a check mask and check bits *)
  (let rvsA = reconcile bs basesA vs)
  (let maskA = tabulate (length rvsA) cb_choose)
  (let checkbitsA = mask_filter 0b1 maskA rvsA)
  (let codeA = mask_filter 0b0 maskA rvsA)

  (* don't worry if Alice doesn't have enough code bits: she will signal if necessary *)
  bcA!maskA . bcA!checkbitsA                    .   (* send check bits and mask *) 

  (* see if Alice is ok with that *)
  (    againA?(_)                               .   (* Alice didn't get enough code bits *)
         log![bool2bit true]                    .   (* going round again *)
         (  ReceiveBits ([], qcA, bcA, received)
          | AsBob (received, qcA, bcA, againA, mc,log)
         )
   <+> bcA?(encrypted)                          .   (* receive her encrypted message *)
        log![bool2bit false]                    .   (* not going round again *)
        log!encrypted                           .
        
        (* decode as Bob would, and send it across *)
        mc ! xor_mask (take (length encrypted) codeA) encrypted
                                                .
        _0
  )
  
proc AsAlice(bs, vs, qcB, bcB, againB, mc, log) =
  log!bs    . log!vs                            .

  bcB!bs . bcB?(basesB)                         .   (* send my bases to Bob; receive his in return *)
  (let rvsB = reconcile basesB bs vs)
  bcB?(maskB) . bcB?(checkbitsB)                .   (* receive Bob's mask and check bits *)
                                                    (* but ignore his check bits *)
  log!checkbitsB                                .   (* -- other than logging them *)
  (let codeB = mask_filter 0b0 maskB rvsB)

  mc?(M)                                        .   (* receive real Alice's clear message *)

  (* there is a possibility that Bob may not have enough code bits ... *)
  if length M > length codeB then
    againB!()                                   .   (* round again, Bob *) 
    log![bool2bit true]                         .   (* going round again *)
    (let n = length bs)
    (let bs = randbits n)
    (let vs = randbits n)
    (new done)
    (  SendBits (zip bs vs,qcB,done)
     | mc!M . _0
     | done?_ . AsAlice (bs, vs, qcB, bcB, againB, mc, log)
    )
  else 
    log![bool2bit false]                        .   (* not going round again *)
    log![bool2bit true]                         .   (* I decoded the message *)
    log!M                                       .   (* and here it is *)
       
    (* encode for Bob as Alice would *)
    bcB!xor_mask (take (length M) codeB) M      .
    _0
  fi

proc CopyBits (bvs, qcA, qcB, bcA, result) =
        qcA?(q)                                 . 
            (let b = randbit ())
            q=?[if b=0 then _I else _H fi](v)   . 
            qcB!q                               . 
            CopyBits ((b,v)::bvs, qcA, qcB, bcA, result)
    <+> bcA?(basesA)                            . 
            (let bs, vs = unzip (rev bvs))
            result!bs . result!vs               . 
            result!basesA                       .
            _0
