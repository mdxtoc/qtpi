proc Experiment (M, nWC, multiplier,reportA,reportE,reportB) = 
  (new qcAE,qcEB,bscAE,bscEB,againAE,againEB)
  (  Alice (M, nWC, multiplier,qcAE,bscAE,againAE,reportA) 
   | Eve   (qcAE,qcEB,bscAE,bscEB,againAE,againEB,reportE) 
   | Bob   (qcEB,bscEB,againEB,reportB)
  )

proc System() = (let n = read_min_int 1 "length of message")
                (let nWC = read_min_int 0 "length of a hash key")
                (let multiplier = read_min_int 3 "qbit multiplier")
                (let k = read_min_int 1 "number of trials")
                (let verbose = read_bool "with commentary" "y" "n")
                Report (k, verbose, n, nWC, multiplier)
           
proc Report (k, verbose, n, nWC, multiplier) = Controller (k, 0, verbose, 0, 0, 
                                                                          0, 0, 
                                                                          0, 0, 
                                                                          0, 0, n, nWC, multiplier)

proc Controller (k, i, verbose, nAlice, nEve, 
                                nRepsA, nRepsE, 
                                sumChecksA, minChecksA, 
                                sumChecksE, minChecksE, n, nWC, multiplier) =
  if i<k then {if k<>1 then print_strings ["trial number "; string_of_value (i+1); 
                                           if verbose then "\n" else " " fi]
                       else () fi
              } .
              (let M = randbits n)
              {if verbose then print_strings ["message is "; string_of_value M; "\n"] else () fi} .
              (new reportA,reportE,reportB,doneA,doneB,doneE)
              (  Experiment (M, nWC, multiplier, reportA, reportE, reportB) 
               | ReportAlice (0, verbose, reportA, doneA)
               | ReportBob (verbose, reportB, doneB)
               | ReportEve (0, verbose, reportE, doneE)
               | doneA?(intf_seen, ncA, repsA)          .
                 doneB?(messageB)                       .
                 doneE?(decodeE, messageE, ncE, repsE)  .
                 (let evewins = decodeE && not intf_seen && messageB=messageE && messageE=M)
                 {print_strings if evewins then ["Eve wins -- "; string_of_value ncA; " check bits E->A; ";
                                                                 string_of_value ncE; " check bits B->E\n"]
                                           else []
                                fi
                 } .
                 (let nAlice, nEve = if   intf_seen then nAlice+1, nEve      (* Alice spotted Eve *)
                                     elif evewins   then nAlice  , nEve+1    (* Alice didn't spot Eve, and Eve saw the message *)
                                     else                nAlice  , nEve      (* somehow Eve was missed, but she didn't see the message *)
                                     fi
                 )
                 (let minc = lam nc minC . if i=0 then nc else min nc minC fi)
                 (let minChecksA = minc ncA minChecksA)
                 (let minChecksE = minc ncE minChecksE)
                 Controller (k, i+1, verbose, nAlice, nEve, 
                                              nRepsA+repsA, nRepsE+repsE, 
                                              sumChecksA+ncA, minChecksA, 
                                              sumChecksE+ncE, minChecksE, n, nWC, multiplier)
              )
         else (let nCorrupt = k-nAlice-nEve)
              {print_strings ["all done: "; 
                              string_of_value nEve;            " Eve's; ";
                              string_of_value nAlice;          " Alice's; ";
                              string_of_value nCorrupt;        " undetected corrupt messages; ";
                              "average check bits (Alice/Eve) " ; string_of_value (sumChecksA/k); 
                              " minimum check bits (Alice/Eve) "; string_of_value minChecksA; 
                              " average check bits (Eve/Bob) "  ; string_of_value (sumChecksE/k); 
                              " minimum check bits (Eve/Bob) "  ; string_of_value minChecksE; 
                              "\n"
                             ]
              } . 
              _0 
  fi
