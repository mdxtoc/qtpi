fun pos_root a b c = (-b+sqrt(b*b-4*a*c))/(2*a)

fun min_qbits k s cmin
  = ceiling (max (rootn*rootn) (rootnmin*rootnmin))
    where rootn = pos_root (3/8) (-s*(sqrt(3/32)+1/2)) (-k)
    where rootnmin = pos_root (1/8) (-s*sqrt(3/32)) (-cmin)
    
proc Alice(M, w, hks, cMin, nSigma, qc, bsc, againc, log) = 
  
  (* Decide on a number of qbits large enough to generate the code bits to encrypt M, 
     plus enough to generate 5 Wegman-Carter hash keys (each w bits, one for each protocol 
     message). We don't want the protocol to fail because we pick too few qbits, and 
     nSigma is the number of standard deviations we want to be away from that possibility.
     
     In this simulation we can set nSigma so that Alice doesn't calculate enough qbits, 
     and when it does Alice sends Bob a signal on a side-channel and tries again.
          
     The protocol uses about n/8 checkbits, but that's 
     included in the formula calculation.
   *)
  (* for the basis of the calculation in min_qbits, see QKD_results.md *)
  . (let n = min_qbits (length M + 5*w) nSigma cMin)  
  
  (* choose the basis and value for each qbit at random *)
  . (let bs = randbits n) 
  . (let vs = randbits n)
  . <-1
  
  (* send Bob the qbits I chose, tell me when it's done *)
  . (new sent)
  | . SendQbits (zip bs vs, qc, sent)
  | . sent?(_)
    
    (* tell each other the qbit bases we used - me first *)
    . (let h0 = hwc bs hks 0 w)
    . bsc!h0,bs                              (* send Bob my bases *)
    . bsc?(h1,bBs)                           (* receive his bases *)
    . <-2
    
    (* pick out the values for which our bases agree *)
    . (let rvs = reconcile bBs bs vs)      
    . <-3
    
    (* Now we both know the same _number_ of values. Bob sends me a mask of
       that number of bits, and a list of the values it picks out from his
       list.
     *)
    . bsc?(h2,mask)
    . bsc?(h3,checkbitsB)
    . <-4
    
    (* test to see if Bob and I agree on the bits selected by his mask *)
    (let checkbitsA = mask_filter 0b1 mask rvs)
    (let check = forall (lam (cb,vb) . cb=vb) (zip checkbitsB checkbitsA))
    
    (* If we disagree about the masked bits then interference has been 
       detected and Alice goes silent. But in this simulation 
       we send an empty message, to keep Bob alive.
     *)
    . if not check then
        . <-5
        . bsc!tagged hks 4 w []                (* empty message *) 
        . _0
      else
        . <-6
        (* If the number of checkbits Bob chose is enough, then it is very 
           very (...) likely that we agree on the rest of the values. So the 
           (secret) code bits are the ones Bob didn't mask. 
         *)
        . (let codebits = mask_filter 0b0 mask rvs)
        . (let hks' = take (5*w) codebits)
        . (let codebits = drop (5*w) codebits)
      
        . if length codebits>=length M then
            . (let code = take (length M) codebits)
            
            . (let encryptedM = xor_mask code M)
            . (let h4 = hwc encryptedM hks 4 w)
            . bsc!h4,encryptedM                  (* send the encrypted message *)
            . (let c_ok = forall (checkhash hks w) (zip [1;2;3] (zip [h1;h2;h3] [bBs;mask;checkbitsB])))
            . <-7
            . _0
          else 
            . <-8
            . againc!() . Alice(M, w, hks, cMin, nSigma, qc, bsc, againc, log)
          fi
      fi

with
  1: . log!bs . log!vs 
     . _0
  2: . log!h0 . log!bs                         
     . log!h1 . log!bBs 
     . _0 
  3: . log!rvs 
     . _0
  4: . log!h2 . log!mask
     . log!h3 . log!checkbitsB 
     . _0 
  5: . log![bool2bit true] 
     . log![]                                   (* no new hash keys *)
     . _0
  6: . log![bool2bit false]
     . _0
  7: . log![bool2bit true]
     . log!code
     . log!h4 . log!encryptedM
     . log![bool2bit (not c_ok)]
     . log!hks'
     . _0
  8: . log![bool2bit false]
     . _0
