proc Bob (N, c, w, hks, qc, bsc, log) = 
    . (new result) 
    | . ReceiveQBits(N,[],qc,result)
    | . result?(bvs)
      . (let (bs,vs) = unzip bvs)       (* bs, vs is what I saw *)
      . ⁁1
      . bsc?(h0,bAs)                    (* Alice's first classical message: bAs are her bases *)
      . ⁁2 
      . (let h1 = hwc bs hks 1 w)
      . bsc!(h1,bs)                     (* send my bases *)
      . ⁁3
      . (let rvs = reconcile bAs bs vs) (* the bits we should agree on *)
      . ⁁4
      . (let mask = tabulate (length rvs) (cb_choose (c/length rvs)))
      . (let checkbits = mask_filter 0b1 mask rvs)
      . (let h2 = hwc mask hks 2 w)
      . bsc!(h2,mask)                   (* send her the mask *)
      . ⁁5
      . (let h3 = hwc checkbits hks 3 w)
      . bsc!(h3,checkbits)              (* send her the checkbits *)
      . ⁁6
      . (let codebits = mask_filter 0b0 mask rvs)

      . bsc?(h4,encryptedM)   
      . (let hks', codebits = split_codebits encryptedM w codebits)
      . (let code = take (length encryptedM) codebits)
      . (let M = xor_mask encryptedM code)
      . (let c_ok = forall (checkhash hks w) (zip [0;4] (zip [h0;h4] [bAs;encryptedM])))
      . ⁁8
      . 

    with
         1: . log!bs . log!vs
            . 
         2: . log!h0 . log!bAs
            . 
         3: . log!h1 . log!bs
            . 
         4: . log!rvs
            . 
         5: . log!h2 . log!mask
            . 
         6: . log!h3 . log!checkbits
            . 
         8: . log!h4 . log!encryptedM
            . log!code
            . log!M
            . log![bool2bit (not c_ok)]
            . log!hks'
            . 
                  
      