fun bit2int b = if b=0b0 then 0 else 1

fun bool2bit b = if b then 0b1 else 0b0
fun bit2bool (b:bit) :bool = b=0b1

fun inverse b = if b=0b0 then 0b1 else 0b0

fun rand4() = i1*2+i2 where i1=bit2int b1
                      where i2=bit2int b2
                      where (b1,b2) = (randbit(), randbit())

fun combine bs bvs = zip (zip bs (map fst bvs)) (map snd bvs)

fun sanitise bbvs
  = map (λ ((b, b'), v') . if b=b' then 0b0 else v') bbvs
  
fun compose (f : 'b -> 'a) (g : 'c -> 'b) (v : 'c) : 'a = f (g v)

(* apply the non-interference test *)
(* All the tests are about choosing from a sequence of k ~= nq/9 with 
   probability (1+h)/2 (where h=1/sqrt 2) ~= 0.854. The standard deviation 
   sigma = sqrt (k*(1+h)/2*(1-h)/2) = sqrt (k/8). 
 *)

fun abs i = if i<0 then -i else i

fun check verbose (bs:[num]) bs' (vs:[bit]) vs' (ij:(num,num))
   = nsigmas<5 where _ = print_strings if verbose then ["combine "; show bbvvs; ";\n"; show vv_ijs; 
                                                        ";\nij="; show ij; " size="; show size; " ndiff="; show ndiff; 
                                                        " expected="; showf 2 expected; " nsigmas="; showf 2 nsigmas; "\n\n"]
                                       else []
               where nsigmas = if sigma<>0 then abs (expected-ndiff)/sigma
                                  else 0 where _ = print_strings ["non-interference check finds "; show size;
                                                                  " "; show ij; "s in\n"; show bbvvs; 
                                                                  "\n -- less than 8 is too few for statistical investigation\n"]
               where expected = size*fsquared
               where fsquared = (1+h)/2
               where h = sqrt (1/2)
               where sigma = sqrt (size/8)
               where ndiff = length (filter (λ (v,v') . v<>v') vv_ijs)
               where size = length vv_ijs
               where vv_ijs = map snd (filter (λ (ij',_) . ij=ij') bbvvs)
               where bbvvs = zip (zip bs bs') (zip vs vs')
            
fun xor_mask code message
   = map (λ (b1,b2) . if b1=b2 then 0b0 else 0b1) (zip code message)

fun frow xs (i,j)
   = (i, j, zs, length (filter (λ (vi,vj) . vi=vj) zs))
       where zs = map (λ ((_,vi),(_,vj)) . (vi,vj)) ys
       where ys = filter (λ ((i',_),(j',_)) . i=i' && j=j') xs
      
fun crossprod xs ys
   = match xs . + []    . []
                + x::xs . row x ys @ crossprod xs ys
                            where row x ys = match ys . + []    . []
                                                        + y::ys . (x,y) :: row x ys
                                                     
(* selecting bits from a sequence length n with probability p:
   how large must n be to guarantee that we get k bits?
   Well: we need to know how many standard deviations sigma, where  
   
     sigma = sqrt (n*p*(1-p))
   
   The mean number that will be picked is n*p; choose n so that the mean is
   s sigmas larger than the number you need:
   
     k = n*p - s*sigma
     
   which is a quadratic in sqrt n, with a=p, b=-s*sqrt(p*(1-p)), c=-k.
   Put q=p*(1-p) and we have
   
     sqrt n = (s*sqrt q + sqrt(s^2*q+4*k*p))/2*p
 *)
 
fun min_qubits k p s = 
      rootn*rootn
        where rootn = (s* sqrt q + sqrt(s*s*q + 4*k*p)) / (2*p)
        where q = p*(1-p)
    
