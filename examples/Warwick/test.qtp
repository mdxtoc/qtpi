fun rand8 () = bits2num (randbits 3)

fun rand2 () = bits2num (randbits 1)

(* counting from 1, as in the Warwick paper *)
fun setup1_1 n m =
  rows 1 (lam ii jj . 0)
  where rows i f =
    if i>n then f else rows (i+1) (tapes 1 0 f)
    where tapes y count f =
      if y=w then if count=0 then choice2 f
                             else choice0 f
      elif c=0 then tapes (y+1) ((count+1) % 2) (choice0 f)
      elif count=0 then tapes (y+1) count (choice1 f)
      else tapes (y+1) count (choice2 f)
      where c = rand2 ()
      where choice0 f ii jj = 
        if ii=i && (jj=4*y-3 || jj=4*y-2 || jj=4*y-1) then 4 
                                                      else f ii jj
      where choice1 f ii jj = 
        if ii=i then if jj=4*y-3 then a
                        elif jj=4*y-1 then b
                        elif jj=m then (f ii m + a + b) % 16
                        else f ii jj
                else f ii jj
        where (a,b) = (2*rand8(), 2*rand8())
      where choice2 f ii jj = 
        if ii=i then if jj=4*y-2 then a
                        elif jj=m then (f ii m + a) % 16
                        else f ii jj
                else f ii jj
        where a = 2*rand8()
    where w = floor (m/4)      

fun setup1_2 n m =
  rows 1 (lam ii jj . 0)
  where rows i f = 
    if i>n then f 
           else rows (i+1) g
                where g = tapes 1 f
                where f = if rand2()=0 then (lam ii jj . if ii=i && jj=1 then 4 else f ii jj) else f
    where tapes y f =
      if y=w then f 
             else tapes (y+1) f 
      where f = if (i+y) % 2 = 0 then if rand2()=0 then (lam ii jj . if ii=2*i-1 && jj=4*y-1 then 4
                                                                       elif ii=2*i && jj=4*y-2 then 4
                                                                       elif ii=2*i && jj=4*y then -4
                                                                       elif ii=i && jj=m then (f i m + f (i+1) m) % 16
                                                                       else f ii jj
                                                        )
                                                   else (lam ii jj . if ii=2*i+1 && jj=4*y-1 then 4
                                                                       elif ii=2*i-1 && jj=4*y-2 then 4
                                                                       elif ii=2*i-1 && jj=4*y then -4
                                                                       elif ii=i+1 && jj=m then (f (i+1) m + f i m) % 16
                                                                       else f ii jj
                                                        )
                                 else f
    where w = floor (m/4)


fun rgate i = (* angle is i*ùùÖ/8 *)
  if i<0 then rgate (16-i) 
         elif i=0 then I 
         else Rx (ùùÖ/8)*rgate (i-1) 

fun enlist n m f = tabulate n (lam i . tabulate m (lam j . f (i+1) (j+1)))

fun delist rows i j = nth (nth rows (i-1)) (j-1)

proc System () =
  (let RX = Rx (ùùÖ/8))
  (*out!["RX="; show RX; "; RX*RX="; show (RX*RX); "; RX*RX*RX="; show (RX*RX*RX); "; RX*RX*RX*RX="; show (RX*RX*RX*RX); "\n"] .*)
  
  (let n = 2)
  (let m = 9)
     
  (let subprotocol = if rand2()=0 then "1.1" else "1.2") 
  (let phi = (if subprotocol="1.1" then setup1_1 else setup1_2) n m)
  out!["phi (subprotocol "; subprotocol; ") = "; show (enlist n m phi); "\n"] .

  (let r = delist (enlist n m (lam i j . rand2())))  
  (let r' = delist (enlist n m (lam i j . rand2()))) 
  out!["r="; show (enlist n m r); ";\nr'="; show (enlist n m r'); "\n"] .
  
  (let theta = delist (enlist n m (lam i j . 2*rand8())))
  out!["theta="; show (enlist n m theta); " (in units of ùùÖ/8)\n"] .
  out!["\n"] .
  
  (let rgate = memofun rgate)
  
  (* I find this hard to describe as a function *)
  (let neighbours = delist [[[(1,2)];[(1,1);(1,3)];[(1,2);(1,4);(2,3)];[(1,3);(1,5)];[(1,4);(1,6);(2,5)];[(1,5);(1,7)];[(1,6);(1,8)];[(1,7);(1,9)];[(1,8)]];
                            [[(2,2)];[(2,1);(2,3)];[(2,2);(2,4);(1,3)];[(2,3);(2,5)];[(2,4);(2,6);(1,5)];[(2,5);(2,7)];[(2,6);(2,8)];[(2,7);(2,9)];[(2,8)]]
                           ])
  out!["neighbours = "; show (enlist n m neighbours); "\n"]   .
  
  (let prep = lam i j . (theta i j + 8*(foldl (lam (x:num) y . x+y) 0 (map (lam (i,j) . r' i j) (neighbours i j)))) % 16)
  out!["prep = "; show (enlist n m prep); "\n"]   .
  
  (let delta = lam phi i j . m1*phi i j + theta i j + 8*r i j
                             where m1 = if r' i j = 0 then 1 else -1
  )
  
  (newq q1_1=|+>) q1_1 >> rgate (prep 1 1)                   . 
  (newq q1_2=|+>) q1_2 >> rgate (prep 1 2) . q1_1,q1_2 >> CZ . out!["1,2\n"] .
  (newq q1_3=|+>) q1_2 >> rgate (prep 1 3) . q1_2,q1_3 >> CZ . out!["1,3\n"] .
  (newq q1_4=|+>) q1_2 >> rgate (prep 1 4) . q1_3,q1_4 >> CZ . out!["1,4\n"] .
  (newq q1_5=|+>) q1_2 >> rgate (prep 1 5) . q1_4,q1_5 >> CZ . out!["1,5\n"] .
  (newq q2_1=|+>) q2_1 >> rgate (prep 2 1) .                   
  (newq q2_2=|+>) q2_2 >> rgate (prep 2 2) . q2_1,q2_2 >> CZ . out!["2,2\n"] .
  (newq q2_3=|+>) q2_3 >> rgate (prep 2 3) . q2_2,q2_3 >> CZ . out!["2,3\n"] .
  (newq q2_4=|+>) q2_4 >> rgate (prep 2 4) . q2_3,q2_4 >> CZ . out!["2,4\n"] .
  (newq q2_5=|+>) q2_5 >> rgate (prep 2 5) . q2_4,q2_5 >> CZ . out!["2,5\n"] .
  q1_3,q2_3 >> CZ .                                            out!["1,3/2,3\n"] .
  q1_5,q2_5 >> CZ .                                            out!["1,5/2,5\n"] .
  (newq q1_6=|+>) q1_6 >> rgate (prep 1 6) . q1_5,q1_6 >> CZ . out!["1,6\n"] .
  (newq q1_7=|+>) q1_7 >> rgate (prep 1 7) . q1_6,q1_7 >> CZ . out!["1,7\n"] .
  (newq q1_8=|+>) q1_8 >> rgate (prep 1 8) . q1_7,q1_8 >> CZ . out!["1,8\n"] .
  (newq q1_9=|+>) q1_9 >> rgate (prep 1 9) . q1_8,q1_9 >> CZ . out!["1,9\n"] .
  (newq q2_6=|+>) q2_6 >> rgate (prep 2 6) . q2_5,q2_6 >> CZ . out!["2,6\n"] .
  (newq q2_7=|+>) q2_7 >> rgate (prep 2 7) . q2_6,q2_7 >> CZ . out!["2,7\n"] .
  (newq q2_8=|+>) q2_8 >> rgate (prep 2 8) . q2_7,q2_8 >> CZ . out!["2,8\n"] .
  (newq q2_9=|+>) q2_9 >> rgate (prep 2 9) . q2_8,q2_9 >> CZ . out!["2,9\n"] .
  (* (newq q3_1=|+>) q3_1 >> rgate (prep 3 1) .
     (newq q3_2=|+>) q3_2 >> rgate (prep 3 2) . q3_1,q3_2 >> CZ . 
     (newq q3_3=|+>) q3_3 >> rgate (prep 3 3) . q3_2,q3_3 >> CZ .
     (newq q3_4=|+>) q3_4 >> rgate (prep 3 4) . q3_3,q3_4 >> CZ .
     (newq q3_5=|+>) q3_5 >> rgate (prep 3 5) . q3_4,q3_5 >> CZ .
     (newq q3_6=|+>) q3_6 >> rgate (prep 3 6) . q3_5,q3_6 >> CZ . 
     (newq q3_7=|+>) q3_7 >> rgate (prep 3 7) . q3_6,q3_7 >> CZ . 
     (newq q3_8=|+>) q3_8 >> rgate (prep 3 8) . q3_7,q3_8 >> CZ . 
     (newq q3_9=|+>) q3_9 >> rgate (prep 3 9) . q3_8,q3_9 >> CZ . 
     q2_7,q3_7 >> CZ .
     q2_9,q3_9 >> CZ .*)
  q1_1 -/- [rgate (delta phi 1 1)*H] (b1_1) . 
  out!["result q1_1 measures "; show b1_1; "\n"] .
  q1_2 -/- [rgate (delta phi 1 2)*H] (b1_2) . 
  out!["result q1_2 measures "; show b1_2; "\n"] .
  q1_3 -/- [rgate (delta phi 1 3)*H] (b1_3) . 
  out!["result q1_3 measures "; show b1_3; "\n"] .
  q1_4 -/- [rgate (delta phi 1 4)*H] (b1_4) . 
  out!["result q1_4 measures "; show b1_4; "\n"] .
  q1_5 -/- [rgate (delta phi 1 5)*H] (b1_5) . 
  out!["result q1_5 measures "; show b1_5; "\n"] .
  q2_1 -/- [rgate (delta phi 1 1)*H] (b1_1) . 
  out!["result q2_1 measures "; show b1_1; "\n"] .
  q2_2 -/- [rgate (delta phi 1 2)*H] (b1_2) . 
  out!["result q2_2 measures "; show b1_2; "\n"] .
  q2_3 -/- [rgate (delta phi 1 3)*H] (b1_3) . 
  out!["result q2_3 measures "; show b1_3; "\n"] .
  q2_4 -/- [rgate (delta phi 1 4)*H] (b1_4) . 
  out!["result q2_4 measures "; show b1_4; "\n"] .
  q2_5 -/- [rgate (delta phi 1 5)*H] (b1_5) . 
  out!["result q2_5 measures "; show b1_5; "\n"] .  
  q1_6 -/- [rgate (delta phi 1 1)*H] (b1_1) . 
  out!["result q1_1 measures "; show b1_1; "\n"] .
  q1_7 -/- [rgate (delta phi 1 2)*H] (b1_2) . 
  out!["result q1_2 measures "; show b1_2; "\n"] .
  q1_8 -/- [rgate (delta phi 1 3)*H] (b1_3) . 
  out!["result q1_3 measures "; show b1_3; "\n"] .
  q1_9 -/- [rgate (delta phi 1 4)*H] (b1_4) . 
  out!["result q1_4 measures "; show b1_4; "\n"] .
  q2_6 -/- [rgate (delta phi 1 1)*H] (b1_1) . 
  out!["result q2_1 measures "; show b1_1; "\n"] .
  q2_7 -/- [rgate (delta phi 1 2)*H] (b1_2) . 
  out!["result q2_2 measures "; show b1_2; "\n"] .
  q2_8 -/- [rgate (delta phi 1 3)*H] (b1_3) . 
  out!["result q2_3 measures "; show b1_3; "\n"] .
  q2_9 -/- [rgate (delta phi 1 4)*H] (b1_4) . 
  out!["result q2_4 measures "; show b1_4; "\n"] .
  _0
