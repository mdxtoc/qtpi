
proc LogAlice (reps, verbose, log, done) =
    log?(bs)   .
    log?(vs)   .
    {if verbose then print_strings ["Alice chose "; show (length bs);
                                     " pairs: "; show (zip bs vs); "\n"] else () fi} .
    log?(bAs)         .
    {if verbose then print_strings ["Alice sent bases "; show bAs; "\n"] else () fi} .
    log?(bBs)  .
    {if verbose then print_strings ["Alice received bases "; show bBs; "\n"] else () fi} .
    log?(rvs)   . 
    {if verbose then print_strings ["Alice reconciled "; show (length rvs);
                                    " bits: "; show rvs; "\n"] else () fi} .
    log?(mask) .
    {if verbose then print_strings ["Alice received check-bit mask "; show mask; "\n"] else () fi} .
    log?(cs)  .
    (let nc = length cs)
    {if verbose then print_strings ["Alice received "; show nc; 
                                    " check bits: "; show cs; "\n"] else () fi} .
    log?(boolbits) .
    if bit2bool (hd boolbits) then
      {print_strings ["interference detected -- "; show nc; " check bits\n"]} .
      done!true,length bs,nc,reps .
      _0
    else
      {if not verbose then print_string  "\n" else () fi}.
      log?(boolbits) .
      if bit2bool (hd boolbits) then
        log?(code) .
        {if verbose then print_strings ["Alice's code is "; show code; "\n"] else () fi} .
        log?(encrypted) .
        {if verbose then print_strings ["Alice sent encrypted "; show encrypted; "\n"] else () fi} .
        done!false,length bs,nc,reps .
        _0
      else
        {print_string  "Alice goes round again\n"} .
        LogAlice (reps+1, verbose, log, done)   
      fi
    fi
  
