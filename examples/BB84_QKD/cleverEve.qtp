(* a sophisticated eavesdropper. Plays Bob to Alice, Alice to Bob *)

proc Eve (qA, qB, bsA, bsB, againA, againB, report) =
    (new copied) 
    (  CopyBits([],qA,qB,bsA,copied)
     | copied?(bs)                      .   (* bs, vs are what I _sent_ *)
       copied?(vs)                      .
            report!bs                   .
            report!vs                   .
      
       copied?(basesA) . bsA!bs         .   (* send my bases to Alice *)
        
       EveLoop (qA, qB, bsA, bsB, againA, againB, bs, vs, bs, vs, basesA, report)
    )
       
proc EveLoop (qA, qB, bsA, bsB, againA, againB, bsA, vsA, bsB, vsB, basesA, report) =
   bsB!bsB . bsB?(basesB)               .   (* send my bases to Bob; receive his in return *)
   (let rvsB = reconcile basesB bsB vsB)
   bsB?(maskB) . bsB?(_)                .   (* receive Bob's mask, ignore his checkbits *)
   (let codeB = mask_filter 0b0 maskB rvsB)
   (* now, can we fake it with Alice to make a code the right length? *)
   (let rvsA = reconcile bsA basesA vsA)
   (let diff = length rvsA - length codeB)
   if diff>=0 then
     (let maskA = tabulate diff (const 0b1) @ tabulate (length codeB) (const 0b0))
     bsA!maskA                          .   (* send Alice the mask and checkbits *)
     bsA!mask_filter 0b1 maskA rvsA     .
     (    againA?(_)                    .   (* Alice didn't get enough code bits *)
            againB!()                   .   (* round again, Bob *)
                report![bool2bit true]  .
            Eve (qA, qB, bsA, bsB, againA, againB, report)
      <+> bsA?(encrypted)               .   (* receive her coded message *)
                report![bool2bit false] .
                report!encrypted        .
            (let codeA = mask_filter 0b0 maskA rvsA)
            (let message = xor_mask (take (length encrypted) codeA) encrypted)
                                                 (* decode as Bob would *)
                 report![bool2bit true] .   (* If ok, I got the message *)
                 report!message         .
            bsB!xor_mask (take (length message) codeB) message       
                                        .   (* encode for Bob as Alice would and send it to him *)
            _0
     )
   else                                     (* too many code bits with Bob *)
      againB!()                         .   (* round again, Bob *)
            report![bool2bit true]      .
      (* in case Bob is suspicious, send him new qbits *)
      (let bs = randbits (length bsB))
      (let vs = randbits (length bsB))
      (new sent)
      (  SendBits (zip bs vs, qB, sent)
       | sent?(_)                       .
            report!bs                   .  
            report!vs                   .
         EveLoop (qA, qB, bsA, bsB, againA, againB, bsA, vsA, bs, vs, basesA, report)
      )
   fi
  
proc CopyBits (bvs, qA, qB, bsA, result) =
        qA?(q)                                  . 
            (let b = randbit ())
            q=?[if b=0 then _I else _H fi](v)   . 
            qB!q                                . 
                          CopyBits ((b,v)::bvs, qA, qB, bsA, result)
    <+> bsA?(basesA)                            . 
            (let bvs = rev bvs)
            result!map fst bvs                  . 
            result!map snd bvs                  . 
            result!basesA                       .
            _0

