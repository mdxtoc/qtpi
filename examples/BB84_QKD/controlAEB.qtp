proc Experiment (M,reportA,reportE,reportB) = 
  (new qcAE,qcEB,bscAE,bscEB,againAE,againEB)
  (  Alice (M,qcAE,bscAE,againAE,reportA) 
   | Eve   (qcAE,qcEB,bscAE,bscEB,againAE,againEB,reportE) 
   | Bob   (qcEB,bscEB,againEB,reportB)
  )

proc System() = (let n = read_int "length of message")
                (let k = read_int "number of trials")
                (let verbose = read_bool "with commentary" "y" "n")
                Report (k, verbose, n)
           
proc Report (k, verbose, n) = Controller (k, 0, verbose, 0, 0, 0, -1, n)

proc Controller (k, i, verbose, nAlice, nEve, sumChecks, minChecks, n) =
  if i<k then {if k<>1 then print_strings ["trial number "; string_of_value (i+1); 
                                           if verbose then "\n" else " " fi]
                       else () fi
              } .
              (let M = randbits n)
              {if verbose then print_strings ["message is "; string_of_value M; "\n"] else () fi} .
              (new reportA,reportE,reportB,doneA,doneB,doneE)
              (  Experiment (M, reportA, reportE, reportB) 
               | ReportAlice (verbose, reportA, doneA)
               | ReportBob (verbose, reportB, doneB)
               | ReportEve (verbose, reportE, doneE)
               | doneA?(intf_seen, nc)              .
                 doneB?(messageB)                   .
                 doneE?(decodeE, messageE)          .
                 (let evewins = decodeE && not intf_seen && messageB=messageE && messageE=M)
                 {print_strings if evewins then ["Eve wins -- "; string_of_value nc; " check bits\n"]
                                           else []
                                fi
                 } .
                 (let nAlice, nEve = if   intf_seen then nAlice+1, nEve      (* Alice spotted Eve *)
                                     elif evewins   then nAlice  , nEve+1    (* Alice didn't spot Eve, and Eve saw the message *)
                                     else                nAlice  , nEve      (* somehow Eve was missed, but she didn't see the message *)
                                     fi
                 )
                 (let minChecks = if minChecks<0 then nc elif nc<minChecks then nc else minChecks fi)
                 Controller (k, i+1, verbose, nAlice, nEve, sumChecks+nc, minChecks, n)
              )
         else (let nCorrupt = k-nAlice-nEve)
              {print_strings ["all done: "; 
                              string_of_value nEve;            " Eve's; ";
                              string_of_value nAlice;          " Alice's; ";
                              string_of_value nCorrupt;        " undetected corrupt messages; ";
                              "average check bits " ; string_of_value (sumChecks/k); 
                              " minimum check bits "; string_of_value minChecks; "\n"
                             ]
              } . 
              _0 
  fi
