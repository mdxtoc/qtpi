fun randg g = if randbit()=0b1 then g else I

fun randfrac () = (* non-zero fraction *)
  if denr=0 then randfrac () 
  elsf numr=0 then randfrac ()
  else numr/denr
   where denr = bits2num (randbits 8)
   where numr = bits2num (randbits 10)

proc Alice (x:qubit, c:^(bit,bit)) = 
    . (newq z) 
    . (let theta = 𝝅*randfrac())
    . out!["theta="; show theta; "; Rx theta="; show (Rx theta); "\n"]
    . z >> Rx theta
    . z >> randg X
    . z >> randg Y
    . z >> randg Z
    . (let phi = 𝝅*randfrac())
    . out!["phi="; show phi; "; Rz phi="; show (Rz phi); "\n"]
    . z >> Rz phi
    . ⁁ 1
    . z,x>>CNot . z>>H . z-/-(vz) . x-/-(vx) 
    . c!vz,vx 
    .  
                                        with 1: out!["initially Alice's z is "] . 
                                                outq!(qval z) . out!["\n"] .
                                                

proc Bob(y:qubit, c:^(bit,bit)) = 
    . c?(pair) 
    . y >> match pair . + (0b0,0b0) . I
                        + (0b0,0b1) . X
                        + (0b1,0b0) . Z
                        + (0b1,0b1) . Z*X    
    . ⁁ 1
    .  
                                        with 1: out!["finally Bob's y is     "] . 
                                                outq!(qval y) . out!["\n"] .
                                                
    

proc System () = 
  .  (newq x=|+>, y=|0>) 
  . x,y>>CNot 
  . (new c:^(bit,bit)) 
  . | Alice(x,c) 
    | Bob(y,c)
