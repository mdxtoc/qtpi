proc 
  Alice(nq,m,qc,ic,bc,logc,verbose) = 
    (new rc) 
      | AliceRead (nq,qc,rc,[])
      | rc?(bvs)    .
        (let bs = map fst bvs)
        ic!bs     .
        ic?(bBs)  .
        (let bBbvs = combine bBs bvs)
        (let vAs = sanitise bBbvs)
        bc!vAs   . (* send Bob the values, where we used different bases *)
        bc?(vBs) .
        (* we can do the non-interference check for all the orientations, but while we have a slow
           interpreter, two each for Alice and Bob sort of gives coverage.
         *)
        (* we go first in the interference dance *)
        (let ok = check verbose bs bBs vAs vBs (0,1) && check verbose bs bBs vAs vBs (1,2))
        bc![bool2bit ok]   . logc![bool2bit ok]   .
        bc?(Bobok)         .
        (let Bobok = bit2bool (hd Bobok))
        if not (ok && Bobok) then
          (* Interference: log an empty message, but don't send anything to Bob *)
          logc![] .
          _0
        else 
          (let key = map snd (filter (lam ((b,b'),v') . b=b') bBbvs))
          (let message = randbits m)
          (* out!["Alice sends  "; show message; "\n"] . *)
          bc!xor_mask (take m key) message   .
          logc!message              .
          _0

  AliceRead (nq,qc,rc,bvs) = 
    if nq=0 then rc!rev bvs . _0
    else
      qc?(q) . (new r) | AliceMeasure (q,r) | r?(bv) . AliceRead (nq-1,qc,rc,bv::bvs)

  AliceMeasure (q,r) =
    match rand4() . 
      + 0 . q-/-[]    (b) . r!0,b . _0
      + 1 . q-/-[Rz]   (b) . r!1,b . _0
      + 2 . q-/-[Rz*Rz] (b) . r!2,b . _0
      + _ . AliceMeasure (q,r) (* 3 - try again *)
