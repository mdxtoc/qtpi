Experiment (n,reportA,reportE,reportB) = (new qc1,qc2,bsc1,bsc2)
                                         (  Alice (n,qc1,bsc1,reportA) 
                                          | Eve   (qc1,qc2,bsc1,bsc2,reportE) 
                                          | Bob   (n,qc2,bsc2,reportB)
                                         )

System() = (let k = read_int "number of trials")
           (let n = read_int "number of qbits")
           (let verbose = read_bool "with commentary" "y" "n")
           Report (k, verbose, n)
           
Report (k, verbose, n) = Controller (k, 0, verbose, 0, 0, 0, -1, n)

Controller (k, i, verbose, nAlice, nEve, sumChecks, minChecks, n) =
  if i<k then {print_strings ["trial number "; string_of_value (i+1); if verbose then "\n" else " " fi]} .
              (new reportA,reportE,reportB)
              (  Experiment (n,reportA,reportE,reportB) 
               | reportA?(bsA)   .
                 reportA?(vsA)   .
                 {if verbose then print_strings ["Alice chose "; string_of_value (zip bsA vsA); "\n"] else () fi} .
                 reportE?(bsE) .
                 reportE?(vsE) .
                 {if verbose then print_strings ["Eve saw "; string_of_value (zip bsE vsE); "\n"] else () fi} .
                 reportB?(bsB) .
                 reportB?(vsB) .
                 {if verbose then print_strings ["Bob saw "; string_of_value (zip bsB vsB); "\n"] else () fi} .
                 reportB?(bAs)         .
                 {if verbose then print_strings ["Alice sent bases "; string_of_value bAs; "\n"] else () fi} .
                 reportA?(bBs)  .
                 {if verbose then print_strings ["Bob sent bases "; string_of_value bBs; "\n"] else () fi} .
                 reportA?(rvAs)   . 
                 {if verbose then print_strings ["Alice reconciled "; string_of_value rvAs; "\n"] else () fi} .
                 reportB?(rvBs) .
                 {if verbose then print_strings ["Bob reconciled "; string_of_value rvBs; "\n"] else () fi} .
                 reportA?(mask) .
                 {if verbose then print_strings ["Bob sent check-bit mask "; string_of_value mask; "\n"] else () fi} .
                 reportA?(vBs)  .
                 {if verbose then print_strings ["Bob sent check bits "; string_of_value vBs; "\n"] else () fi} .
                 reportB?(codeB) .
                 {if verbose then print_strings ["Bob's code is "; string_of_value codeB; "\n"] else () fi} . 
                 reportA?(bcodeA) .
                 (let intf_seen, codeA = match bcodeA .
                                             b::code . b<>0b1, code
                                         <+> _       . abandon "can't happen"
                                         hctam
                 )
                 (let nc = length vBs)
                 {print_strings if   intf_seen then ["interference detected -- "; string_of_value nc; " check bits\n"]
                                elif verbose then   []
                                else                ["\n"]
                                fi
                 } .
                 {if verbose then print_strings ["Alice's code is "; string_of_value codeA; "\n"] else () fi} .
                 reportB?(messageB) .
                 {if verbose then print_strings ["Bob chooses message "; string_of_value messageB; "\n"] else () fi} .
                 reportE?(codedEvs)  .
                 {if verbose then print_strings ["Eve sees coded "; string_of_value codedEvs; "\n"] else () fi} .
                 reportE?(bmessageE)  .
                 (let decodeE, messageE = match bmessageE .
                                              b::message . b=0b1, message
                                          <+> []         . abandon "can't happen bmessage"
                                          hctam
                 )
                 {if verbose && decodeE then print_strings ["Eve decodes message "; string_of_value messageE; "\n"] else () fi} .
                 reportA?(codedAvs)  .
                 {if verbose then print_strings ["Alice sees coded "; string_of_value codedAvs; "\n"] else () fi} .
                 reportA?(messageA) .
                 {if verbose then print_strings ["Alice decodes message "; string_of_value messageA; "\n"] else () fi} .
                 (let evewins = decodeE && not intf_seen && messageB=messageE && messageE=messageA)
                 {print_strings if evewins then ["Eve wins -- "; string_of_value nc; " check bits\n"]
                                           else []
                                fi
                 } .
                 (let nAlice, nEve = if   intf_seen then nAlice+1, nEve      (* Alice spotted Eve *)
                                     elif evewins   then nAlice  , nEve+1    (* Alice didn't spot Eve, and Eve saw the message *)
                                     else                nAlice  , nEve      (* somehow Eve was missed, but she didn't see the message *)
                                     fi
                 )
                 (let minChecks = if minChecks<0 then nc elif nc<minChecks then nc else minChecks fi)
                 Controller (k, i+1, verbose, nAlice, nEve, sumChecks+nc, minChecks, n)
              )
         else (let nCorrupt = k-nAlice-nEve)
              {print_strings ["all done: "; 
                              string_of_value nEve;            " Eve's; ";
                              string_of_value nAlice;          " Alice's; ";
                              string_of_value nCorrupt;        " messages corrupted; ";
                              "average check bits " ; string_of_value (sumChecks/k); 
                              " minimum check bits "; string_of_value minChecks; "\n"
                             ]
              } . 
              _0 
  fi
