
Alice(n:int, r:^bit, toBob) = 
  r?(basis) .
  (new chosen) (  AliceChoose (n,[],r,chosen)
                | chosen?(vs) . AliceSend (basis, vs, toBob)
               )

(* choose n bits *)
AliceChoose(n:int, vs:bit list, r, chosen) =
    if n=0 then chosen!vs . _0
    else r?(v) . AliceChoose(n-1,v::vs,r,chosen)
    fi

AliceSend(basis, vs:bit list, toBob) =
    (new qB,bB,vB)
    toBob!qB,bB,vB .
    (new done) (  AliceSendBits (vs,basis,qB,done)
                | done?(s) . bB?(guess:bit) . vB!basis,vs .
                  {print_string if guess=basis then "Bob wins\n" else "Alice wins\n" fi} .
                  _0
               )

(* send bits encoded in basis down channel qB *)
AliceSendBits (vs,basis,qB,done) =   
    match vs .
        []    . done!() . _0
    <m> v::vs . (newq q = match basis,v .
                              0b0,0b0 . |0> 
                          <m> 0b0,0b1 . |1> 
                          <m> 0b1,0b0 . |+> 
                          <m> 0b1,0b1 . |-> 
                          hctam
                )
                qB!q.
                AliceSendBits(vs,basis,qB,done)
    hctam

Bob(n:int, r:^bit, fromAlice) = 
    fromAlice?(qA,bA,vA) .
    (new done) (  BobReceive(n,[],qA,r,done)
                | done?(bvs) . r?(guess) .
                  bA!guess . vA?(basis:bit, vs:bit list) .
                  BobVerify (basis,vs,bvs)
               )

(* receive qbits down qA, measure them, record the results *)
BobReceive(n,bvs,qA,r,done) =
    if n=0 then done!rev bvs . _0
    else qA?(q).
         r?(basis).
         q >> if basis=0b1 then _H else _I fi.
         q =? (value).
         q =?[if basis=0b1 then _H else _I fi] (value).
         BobReceive(n-1,(basis,value)::bvs,qA,r,done)
    fi

(* verify Alice's story *)
BobVerify (basis, vs, bvs) = 
  match vs, bvs .
      []   , []           . Honest ()
  <m> []   , _            . Liar ()
  <m> _    , []           . Liar ()
  <m> v::vs, (b,v')::bvs  . if b=basis && v<>v' 
                              then Liar ()
                              else BobVerify(basis,tl(vs),tl(bvs))
                              else BobVerify(basis,vs,bvs)
                            fi
  hctam
  
Liar   () = {print_string "Alice lied\n"} . _0
Honest () = {print_string "Alice was honest\n"} . _0

(* a source of random bits. A bit of a joke, but relatively harmless *)
Random(q:qbit, r:^bit) = q>>_H . q=?(v) . r!v . Random(q,r)

System() = (let n = read_int "number of qbits")
           (new r,c)
           (Alice(n,r,c) | Bob(n,r,c) | (newq q = |0>) Random(q,r))
