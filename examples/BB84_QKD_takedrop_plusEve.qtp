
Alice (k,verbose,n,r,qB,bsB) = Alice1 (k, k, 0, 0, 0, -1, verbose, n, r, qB, bsB)

Alice1(k, i, nGood, nBad, sumChecks, minChecks, verbose, n:int, r:^bit, qB, bsB) = 
  if i=0 then {print_strings ["all done: "; 
                              string_of_value nGood; " Eve's; ";
                              string_of_value nBad; " Alice's; ";
                              "average check bits "; string_of_value (sumChecks/k); 
                              " minimum check bits "; string_of_value minChecks; "\n"
                             ]
              } . 
              _0
         else {print_strings ["trial number "; string_of_value (k-i+1); if verbose then "\n" else " " fi]} .
              (new chosen, again) (  AliceChoose (n,[],r,chosen)
                                   | chosen?(bvs) . 
                                     {if verbose then print_strings ["Alice chose "; string_of_value bvs; "\n"] else () fi} .
                                     AliceSend (verbose, bvs, qB, bsB, again)
                                   | again?(b,nc) .
                                     Alice1 (k, i-1,
                                                if b then nGood+1 else nGood fi,
                                                if b then nBad else nBad+1 fi,
                                                sumChecks+nc,
                                                if minChecks<0 then nc
                                                elif nc<minChecks then nc
                                                else minChecks
                                                fi,
                                                verbose,
                                                n,r,qB,bsB)
                                  )
  fi
  
(* choose n basis,bit pairs *)
AliceChoose(n, bvs, r, chosen) =
    if n=0 then chosen!bvs . _0
           else r?(b) . r?(v) . AliceChoose(n-1,(b,v)::bvs,r,chosen)
    fi

AliceSend(verbose, bvs, qB, bsB, again) =
    (new done) (  AliceSendBits (bvs,qB,done)
                | done?(s) . AliceNegotiate (verbose, bvs, bsB, again)
               )

(* send encoded bits down channel qB *)
AliceSendBits (bvs,qB,done) =   
    match bvs .
        []         . done!() . _0
    <m> (b,v)::bvs . (newq q = match b,v .
                                   0b0,0b0 . |0> 
                               <m> 0b0,0b1 . |1> 
                               <m> 0b1,0b0 . |+> 
                               <m> 0b1,0b1 . |-> 
                               hctam
                     )
                     qB!q.
                     AliceSendBits(bvs,qB,done)
    hctam

AliceNegotiate (verbose,bvs,bsB,again) =
    bsB!map fst bvs . (* send him my bases *)
    bsB?(bBs)       . (* receive his bases *)
    {if verbose then print_strings ["Bob sent bases "; string_of_value bBs; "\n"] else () fi} .
    (new done) (  Reconcile (bBs, bvs, [], done)
                | done?(vs) . (* vs are the values we should agree upon *)
                  {if verbose then print_strings ["Alice reconciled "; string_of_value vs; "\n"] else () fi} .
                  bsB?(vBs) . (* vBs are the bits to check, from vs *)
                  {if verbose then print_strings ["Bob sent check bits "; string_of_value vBs; "\n"] else () fi} .
                  (new done) (AliceCheck (vBs, vs, done)
                              | done?(b) . 
                                {print_strings (if b then if verbose then ["Alice's code is "; 
                                                                           string_of_value (drop (length vBs) vs); 
                                                                           "\n"]
                                                                     else  ["code -- "; string_of_value (length vBs); " check bits\n"]
                                                          fi
                                               else ["interference detected -- "; string_of_value (length vBs); " check bits\n"]
                                               fi
                                              )
                                } .
                                again!b, length vBs .
                                _0
                             )
               )
    
AliceCheck (vBs, vs, done) =
  match vBs, vs .
      []    , _       . done!true . _0
  <m> v::vBs, v'::vs  . if v=v' then AliceCheck (vBs, vs, done) else done!false . _0 fi
  <m> _               . done!false . _0
  hctam

Reconcile (bBs,bvs,vs,done) =
  match bBs, bvs .
       []     , []         . (done!rev vs . _0)
   <m> bB::bBs, (b,v)::bvs . Reconcile (bBs, bvs, if bB=b then v::vs else vs fi, done)
   <m> _                   . {print_string "Reconcile failure"} . _0
   hctam
  

Bob(k, verbose, n:int, r:^bit, qA, bsA) = 
  if k=0 then _0
  else
    (new done) (  BobReceive(n,[],qA,r,done)
                | done?(bvs)      . (* bvs is what I saw *)
                  {if verbose then print_strings ["Bob saw "; string_of_value bvs; "\n"] else () fi} .
                  bsA?(bAs)       . (* receive her bases *)
                  {if verbose then print_strings ["Alice sent bases "; string_of_value bAs; "\n"] else () fi} .
                  bsA!map fst bvs . (* send my bases *)
                  (new done) (  Reconcile (bAs,bvs,[],done)
                              | done?(vs) . (* the bits we agree on *)
                                {if verbose then print_strings ["Bob reconciled "; string_of_value vs; "\n"] else () fi} .
                                (let checklength = (length vs)/4)
                                bsA!take checklength vs . (* send her a sample *)
                                (let code = drop checklength vs)
                                {if verbose then print_strings ["Bob's code is "; string_of_value code; "\n"] else () fi} .                                
                                Bob (k-1, verbose, n, r, qA, bsA)
                             )
               )
  fi
  
(* receive qbits down qA, measure them, record the results *)
BobReceive(n,bvs,qA,r,done) =
    if n=0 then done!rev bvs . _0
    else qA?(q).
         r?(basis).
         q =?[if basis=0b1 then _H else _I fi] (value) .
         dispose!q .
         BobReceive(n-1,(basis,value)::bvs,qA,r,done)
    fi
       
(* a very naive eavesdropper. Sees Alice's bits but messes with them. Knows 'n', somehow *)
Eve (k, verbose, n, r:^bit, qA, qB) =
  if k=0 then _0
  else
    (new done) (  EvesDrop(n,[],r,qA,qB,done)
                | done?(bvs) .
                  {if verbose then print_strings ["Eve saw "; string_of_value bvs; "\n"] else () fi} .
                  Eve (k-1, verbose, n, r, qA, qB)
               )
  fi
  
EvesDrop (n, bvs, r:^bit, qA, qB, done) =
    if n=0 then done!rev bvs . _0
    else qA?(q) .
         r?(b) .
         q=?[if b=0 then _I else _H fi](v) . 
         qB!q . 
         EvesDrop (n-1, (b,v)::bvs, r, qA, qB, done)
    fi

(* a source of random bits. A bit of a joke, but relatively harmless *)
Random(q:qbit, r:^bit) = q>>_H . q=?(v) . r!v . Random(q,r)

System() = (let k = read_int "number of trials")
           (let n = read_int "number of qbits")
           (let s = read_string "with commentary (y/n)")
           (let verbose = match s . "y" . true <m> "n" . false <m> _ . abandon "pardon?" hctam)
           (new r,qc1,qc2,bsc)
           (Alice(k,verbose,n,r,qc1,bsc) | Bob(k,verbose,n,r,qc2,bsc) | Eve (k,verbose,n,r,qc1,qc2) | (newq q = |0>) Random(q,r))
