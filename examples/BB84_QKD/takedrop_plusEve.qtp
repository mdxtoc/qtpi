
proc Alice (k,verbose,n,r,qB,bsB) = Alice1 (k, k, 0, 0, 0, -1, verbose, n, r, qB, bsB)

proc Alice1(k, i, nGood, nBad, sumChecks, minChecks, verbose, n:int, r:^bit, qB, bsB) = 
  if i=0 then out!["all done: "; 
                              show nGood; " Eve's; ";
                              show nBad; " Alice's; ";
                              "average check bits "; show (sumChecks/k); 
                              " minimum check bits "; show minChecks; "\n"
                             ] . 
              _0
         else out!["trial number "; show (k-i+1); if verbose then "\n" else " " fi] .
              (new chosen, again)  
              | AliceChoose (n,[],r,chosen)
              | chosen?(bvs) . 
                out!if verbose then ["Alice chose "; show bvs; "\n"] else [] fi .
                AliceSend (verbose, bvs, qB, bsB, again)
              | again?(b,nc) .
                Alice1 (k, i-1,
                           if b then nGood+1 else nGood fi,
                           if b then nBad else nBad+1 fi,
                           sumChecks+nc,
                           if minChecks<0 then nc
                           elif nc<minChecks then nc
                           else minChecks
                           fi,
                           verbose,
                           n,r,qB,bsB)
  fi
  
(* choose n basis,bit pairs -- this could all be done with Random *)
proc AliceChoose(n, bvs, r, chosen) =
    (let bs = randbits n) (let vs = randbits n) chosen!zip bs vs . _0

proc AliceSend(verbose, bvs, qB, bsB, again) =
    (new done)  
    | AliceSendBits (bvs,qB,done)
    | done?(s) . AliceNegotiate (verbose, bvs, bsB, again)

(* send encoded bits down channel qB *)
proc AliceSendBits (bvs,qB,done) =   
    match bvs .
    + []         . done!() . _0
    + (b,v)::bvs . (newq q = match b,v .
                             + 0b0,0b0 . |0> 
                             + 0b0,0b1 . |1> 
                             + 0b1,0b0 . |+> 
                             + 0b1,0b1 . |-> 
                   )
                   qB!q.
                   AliceSendBits(bvs,qB,done)

proc AliceNegotiate (verbose,bvs,bsB,again) =
    bsB!map fst bvs . (* send him my bases *)
    bsB?(bBs)       . (* receive his bases *)
    out!if verbose then ["Bob sent bases "; show bBs; "\n"] else [] fi .
    (new done)  
    | Reconcile (bBs, bvs, [], done)
    | done?(vs) . (* vs are the values we should agree upon *)
      out!if verbose then ["Alice reconciled "; show vs; "\n"] else [] fi .
      bsB?(vBs) . (* vBs are the bits to check, from vs *)
      out!if verbose then ["Bob sent check bits "; show vBs; "\n"] else [] fi .
      (new done)  
      | AliceCheck (vBs, vs, done)
      | done?(b) . 
        out!if b then if verbose then ["Alice's code is "; show (drop (length vBs) vs); "\n"]
                                 else  ["code -- "; show (length vBs); " check bits\n"]
                      fi
                 else ["interference detected -- "; show (length vBs); " check bits\n"]
            fi .
        again!b, length vBs .
        _0
    
proc AliceCheck (vBs, vs, done) =
  match vBs, vs .
  + []    , _       . done!true . _0
  + v::vBs, v'::vs  . if v=v' then AliceCheck (vBs, vs, done) else done!false . _0 fi
  + _               . done!false . _0

proc Reconcile (bBs,bvs,vs,done) =
  match bBs, bvs .
  + []     , []         . (done!rev vs . _0)
  + bB::bBs, (b,v)::bvs . Reconcile (bBs, bvs, if bB=b then v::vs else vs fi, done)
  + _                   . out!["Reconcile failure"] . _0
  

proc Bob(k, verbose, n:int, r:^bit, qA, bsA) = 
  if k=0 then _0
  else
    (new done) 
    | BobReceive(n,[],qA,r,done)
    | done?(bvs)      . (* bvs is what I saw *)
      out!if verbose then ["Bob saw "; show bvs; "\n"] else [] fi .
      bsA?(bAs)       . (* receive her bases *)
      out!if verbose then ["Alice sent bases "; show bAs; "\n"] else [] fi .
      bsA!map fst bvs . (* send my bases *)
      (new done)  
      | Reconcile (bAs,bvs,[],done)
      | done?(vs) . (* the bits we agree on *)
        out!if verbose then ["Bob reconciled "; show vs; "\n"] else [] fi .
        (let checklength = (length vs)/4)
        bsA!take checklength vs . (* send her a sample *)
        (let code = drop checklength vs)
        out!if verbose then ["Bob's code is "; show code; "\n"] else [] fi .                                
        Bob (k-1, verbose, n, r, qA, bsA)
  fi
  
(* receive qbits down qA, measure them, record the results *)
proc BobReceive(n,bvs,qA,r,done) =
    if n=0 then done!rev bvs . _0
    else qA?(q).
         r?(basis).
         q =?[if basis=0b1 then _H else _I fi] (value) .
         BobReceive(n-1,(basis,value)::bvs,qA,r,done)
    fi
       
(* a very naive eavesdropper. Sees Alice's bits but messes with them. Knows 'n', somehow *)
proc Eve (k, verbose, n, r:^bit, qA, qB) =
  if k=0 then _0
  else
    (new done) 
    | EvesDrop(n,[],r,qA,qB,done)
    | done?(bvs) .
      out!if verbose then ["Eve saw "; show bvs; "\n"] else [] fi .
      Eve (k-1, verbose, n, r, qA, qB)
  fi
  
proc EvesDrop (n, bvs, r:^bit, qA, qB, done) =
    if n=0 then done!rev bvs . _0
    else qA?(q) .
         r?(b) .
         q=?[if b=0 then _I else _H fi](v) . 
         (newq q = match b,v .
                   + 0b0,0b0 . |0>
                   + 0b0,0b1 . |1>
                   + 0b1,0b0 . |+>
                   + 0b1,0b1 . |->
         ) 
         qB!q . 
         EvesDrop (n-1, (b,v)::bvs, r, qA, qB, done)
    fi

(* a source of random bits. A bit of a joke, but relatively harmless *)
proc Random(r:^bit) = (newq q=|+>) q=?(v) . r!v . Random(r)

proc System() = (let k = read_int "number of trials")
                (let n = read_int "number of qbits")
                (let s = read_string "with commentary (y/n)")
                (let verbose = match s . 
                               + "y" . true 
                               + "n" . false 
                               + _ . abandon ["pardon?"]
                )
                (new r,qc1,qc2,bsc)
                | Alice(k,verbose,n,r,qc1,bsc) 
                | Bob(k,verbose,n,r,qc2,bsc) 
                | Eve (k,verbose,n,r,qc1,qc2) 
                | Random(r)
