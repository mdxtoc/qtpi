(* a sophisticated eavesdropper. Plays Bob to Alice, Alice to Bob *)

proc Eve (w, hksAE, hksEB, qcA, qcB, bcA, bcB) =
    (new measured) 
    | . CopyQBits([],qcA,qcB,bcA,measured)
    | . measured?(bs)                       (* bs, vs are what I saw and then sent *)
      . measured?(vs)                      
      . /^1
     
      .measured?_                           (* ignore Bob's hashes: I'm the villain here *)
      .measured?(bsA)                       (* Alice's bases *)
      . bcA!tagged hksAE 1 w bs             (* send my bases (as if Bob) to Alice *)
      . bcB!tagged hksEB 0 w bs             (* and (as if Alice) to Bob *)   
      . bcB?(_,basesB)                      (* receive his in return *)
      . (let rvsB = reconcile basesB bs vs)
      . bcB?(_,maskB) . bcB?(_,checkbitsB)  (* receive Bob's mask and check bits *)
      . /^2

      (* like Bob, make a checkbit mask for Alice *)
      . (let rvsA = reconcile bs bsA vs)
      . (let maskA = tabulate (length rvsA) cb_choose)
      . (let codebitsA = mask_filter 0b0 maskA rvsA)
      . (let codebitsB = mask_filter 0b0 maskB rvsB)
      (* if Alice has more code bits than Bob then she might send me a message
         that I can't recrypt. I have to deal with that.
       *)
      . bcA!tagged hksAE 2 w maskA          (* send Alice the mask and checkbits *)
      . (let cbsA = mask_filter 0b1 maskA rvsA)
      . bcA!tagged hksAE 3 w cbsA   
      . bcA?(_,encrypted)                   (* receive her coded message *)
      . (let hkbsAE', codebitsA = split_codebits encrypted w codebitsA)
                                            (* split the codebits as Bob would *)
      . (let codeA = take (length encrypted) codebitsA)
      . (let messageA = xor_mask codeA encrypted)
                                            (* decode as Bob would *)

      (* encode for Bob as Alice would and send it to him. Truncate if necessary, as Alice would *)
      . (let hkbsEB', codebitsB = split_codebits encrypted w codebitsB)
                                            (* split the codebits as Alice would *)
      . (let codeB = take (length encrypted) codebitsB)
      . (let messageB = xor_mask codeB (take (length codeB) messageA))
      . bcB!tagged hksEB 4 w messageB      
      . /^3
       . _0

  with (logAE, logEB)
    1: . logEB!bs. logEB!vs
       . _0
    2: . logEB!checkbitsB
       . _0
    3: . logAE!encrypted           
       . logAE!codeA
       . logEB![bool2bit true]              (* can decrypt, sort of *)
       . logEB!messageA                     (* best guess *)
       . logAE!hkbsAE'                           
       . logEB!hkbsEB'                          
       . _0            
