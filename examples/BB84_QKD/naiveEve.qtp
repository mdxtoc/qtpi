(* a naive eavesdropper. Sees Alice's bits but messes with them. *)
proc Eve (w, hksAE, hksEB, qA, qB, bsA, bsB, logAE,logEB) =
    . (new measured) 
    | . CopyQBits([],qA,qB,bsA,measured)
    | . measured?(bs)                       (* bs, vs are what I think I saw *)
      . measured?(vs)
      . /^1
     
      . measured?(h)
      . measured?(basesA) . bsB!h,basesA    (* bases A->B       *)
      . bsB?(h,basesB)    . bsA!h,basesB    (* bases B->A       *)
      . bsB?(h,mask)      . bsA!h,mask      (* mask B->A        *)
      . bsB?(h,cs)        . bsA!h,cs        (* checkbits B->A   *)
      . /^2
      
      . bsA?(h,encrypted)                   (* encrypted message A->B *)
      . bsB!h,encrypted               (* send it on *)
      . (let rvs = reconcile basesB basesA vs)    
                                      (* find the vs for which Alice and Bob used the same bases *)
      . (let _, codebits = split_codebits encrypted w (mask_filter 0b0 mask rvs))
                                      (* my codebits *)
      . (let code = take (length encrypted) codebits)
                                      (* my idea of the code *)
      . (let M = xor_mask code encrypted) 
                                      (* decrypt Alice's message (maybe) *)
      . /^3
      . _0

                with
                  1: . logEB!bs. logEB!vs
                     . _0
                  2: . logEB!cs
                     . _0
                  3: . logAE!encrypted           
                     . logAE!code
                     . logEB![bool2bit true]             (* can decrypt, sort of *)
                     . logEB!M                           (* best guess *)
                     . logAE![]                          (* empty hash keys A<->E *)
                     . logEB![]                          (* empty hash keys E<->B *)
                     . _0            
