proc Experiment (M, nWC, nSigma,logA,logAE,logEB,logB) = 
  (new qcAE,qcEB,bscAE,bscEB,againAE,againEB)
  (  Alice (M, nWC, nSigma,qcAE,bscAE,againAE,logA) 
   | Eve   (qcAE,qcEB,bscAE,bscEB,againAE,againEB,logAE,logEB) 
   | Bob   (qcEB,bscEB,againEB,logB)
  )

proc System() = (let n = read_min_int 1 "length of message")
                (let nWC = read_min_int 0 "length of a hash key")
                (let nSigma = read_min_int 0 "number of sigmas")
                (let k = read_min_int 1 "number of trials")
                (let verbose = read_bool "with commentary" "y" "n")
                Run (k, verbose, n, nWC, nSigma)
           
proc Run (k, verbose, n, nWC, nSigma) = Logger (k, 0, verbose, 0,  0, 
                                                                      0,  0, 
                                                                      [], [],
                                                                      n, nWC, nSigma)

proc Logger (k, i, verbose, nAlice, nEve, 
                                nRepsA, nRepsB, 
                                ncAs, ncBs,
                                n, nWC, nSigma) =
  if i<k then {if k<>1 then print_strings  ["trial number "; string_of_value (i+1); 
                                           if verbose then "\n" else " " fi]
                       else () fi
              } .
              (let M = randbits n)
              {if verbose then print_strings  ["message is "; string_of_value M; "\n"] else () fi} .
              (new logA,logAE,logEB,logB,doneA,doneB,doneE)
              (  Experiment (M, nWC, nSigma, logA, logAE,logEB, logB) 
               | LogAlice (0, verbose, logA, doneA)
               | LogBob (0, verbose, logB, doneB)
               | LogEve (verbose, logAE, logEB, doneE)
               | doneA?(intf_seen, nbA, ncA, repsA)     .
                 doneB?(ncB, messageB, repsB)           .
                 doneE?(decodeE, messageE, _, _)        .
                 (let evewins = decodeE && not intf_seen && messageB=messageE && messageE=M)
                 {print_strings  if evewins then ["Eve wins -- "; string_of_value ncA; " check bits E->A; "; string_of_value ncB; " check bits B->E\n"]
                                           else []
                                fi
                 } .
                 {if i+1=k then print_strings  [string_of_value nbA; " qbits"; if k=1 then "\n" else " per trial\n" fi]
                  else () fi
                 } .
                 (let nAlice, nEve = if   intf_seen then nAlice+1, nEve      (* Alice spotted Eve *)
                                     elif evewins   then nAlice  , nEve+1    (* Alice didn't spot Eve, and Eve saw the message *)
                                     else                nAlice  , nEve      (* somehow Eve was missed, but she didn't see the message *)
                                     fi
                 )
                 Logger (k, i+1, verbose, nAlice, nEve, 
                                              nRepsA+repsA, nRepsB+repsB, 
                                              ncA::ncAs, ncB::ncBs,
                                              n, nWC, nSigma)
              )
         else (let nCorrupt = k-nAlice-nEve)
              {print_strings ["all done: "; 
                              string_of_value nEve;                " Eve's; ";
                              string_of_value nAlice;              " Alice's; ";
                              string_of_value nCorrupt;            " undetected corrupt messages; ";
                              string_of_value nRepsA;              " repetitions (Alice-Eve); ";
                              string_of_value nRepsB;              " repetitions (Eve-Bob); ";
                              "average check bits (Alice/Eve) "  ; string_of_value (listsum ncAs/k); 
                              "; minimum check bits (Alice/Eve) "; string_of_value (listmin ncAs); 
                              "; average check bits (Eve/Bob) "  ; string_of_value (listsum ncBs/k); 
                              "; minimum check bits (Eve/Bob) "  ; string_of_value (listmin ncBs); "\n";
                              "histogram of check-bit lengths (Alice/Eve) "; string_of_value (histogram ncAs); "\n";
                              "histogram of check-bit lengths (Eve/Bob) "; string_of_value (histogram ncBs); "\n"
                             ]
              } . 
              _0 
  fi
