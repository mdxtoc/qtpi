proc Bob(n:int, qA, bsA, report) = 
    (new received) 
    (  ReceiveBits(n,[],qA,received)
     | received?(bvs)     . (* bvs is what I saw *)
       report!map fst bvs .
       report!map snd bvs .
       bsA?(bAs)          . (* receive her bases *)
       report!bAs         .
       bsA!map fst bvs    . (* send my bases *)
       (let rvs = reconcile bAs bvs) (* the bits we should agree on *)
       report!rvs       .
       (let mask = tabulate (length rvs) quarter
                     where quarter = lam _ . if randbit()=0b1 && randbit()=0b1 
                                             then 0b1 else 0b0 
                                             fi
       )
       (let checkbits = mask_filter 0b1 mask rvs)
       bsA!mask         . (* send her the mask *)
       bsA!checkbits    . (* send her the checkbits *)
       (let code = mask_filter 0b0 mask rvs)
       report!code      .
       (let message = randbits (length code))
       report!message   .
       bsA!(xor_mask code message) .
       _0
    )
  
(* receive qbits, measure them, record the results *)
proc ReceiveBits(n,bvs,qA,result) =
    if n=0 then result!rev bvs . _0
    else qA?(q).
         (let basis = randbit ())
         q =?[if basis=0b1 then _H else _I fi] (value) .
         dispose!q .
         ReceiveBits(n-1,(basis,value)::bvs,qA,result)
    fi
       
