
proc System () =
  [ (a,b,c) <- [(|0>,|0>,|0>); (|0>,|0>,|1>); (|0>,|1>,|0>); (|0>,|1>,|1>); 
                (|1>,|0>,|0>); (|1>,|0>,|1>); (|1>,|1>,|0>); (|1>,|1>,|1>);
                (|+>,|0>,|0>); (|0>,|+>,|0>); (|0>,|0>,|+>); 
                (|+>,|+>,|0>); (|+>,|0>,|+>); (|0>,|+>,|+>);
                (|+>,|+>,|+>)] :
        (newq qA = a, 
              qB = b,
              qCin = c) . /^1 .
        (newq qSum=|0>, qCout=|0>) .
        (* qA>>X . *) qA,qSum>>CNot . qB,qSum>>CNot . qCin,qSum>>CNot .
        qA,qB,qCout>>T . qA,qCin,qCout>>T . qB,qCin,qCout>>T .
        /^2 . 
        
        (* collapse entanglements and dispose, to simplify trace *)
        qA-/-(_) . qB-/-(_) . qCin-/-(_) . 
        qSum-/-(_) . qCout-/-(_) . 
        _0
  ] . 
  _0
            with 1: out!["full adder sum of (A="] . outq!qval qA . out![", B="] . outq!qval qB . out![", Cin="] . outq!qval qCin . out![")"] ._0
                 2: out![" is (Cout="] . outq!qval qCout . out![", sum="] . outq!qval qSum . out![")\n"] . _0
