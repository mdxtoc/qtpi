
proc Alice(n:num, r:^bit, qB, bsB) = 
  (new chosen) 
  | AliceChoose (n,[],r,chosen)
  | chosen?(bvs) . 
    out!["Alice chose "; show bvs; "\n"] .
    AliceSend (bvs, qB, bsB)

(* choose n basis,bit pairs *)
proc AliceChoose(n, bvs, r, chosen) =
    if n=0 then chosen!bvs . _0
           else r?(b) . r?(v) . AliceChoose(n-1,(b,v)::bvs,r,chosen)
    fi

proc AliceSend(bvs, qB, bsB) =
    (new done) 
    | AliceSendBits (bvs,qB,done)
    | done?(s) . AliceNegotiate (bvs,bsB)

(* send encoded bits down channel qB *)
proc AliceSendBits (bvs,qB,done) =   
    match bvs .
    + []         . done!() . _0
    + (b,v)::bvs . (newq q = match b,v .
                             + 0b0,0b0 . |0> 
                             + 0b0,0b1 . |1> 
                             + 0b1,0b0 . |+> 
                             + 0b1,0b1 . |->
                   ) 
                   qB!q.
                   AliceSendBits(bvs,qB,done)

proc AliceNegotiate (bvs,bsB) =
    bsB!map fst bvs . (* send him my bases *)
    bsB?(bBs)       . (* receive his bases *)
    out!["Bob sent bases "; show bBs; "\n"] .
    (new done) 
    | Reconcile (bBs, bvs, [], done)
    | done?(vs) . (* vs are the values we should agree upon *)
      out!["Alice reconciled "; show vs; "\n"] .
      bsB?(vBs) . (* vBs are the bits to check, from vs *)
      out!["Bob sent check bits "; show vBs; "\n"] .
      (new done) 
      | AliceCheck (vBs, vs, done)
      | done?(s) . Good (drop (length vBs) vs)
    
proc AliceCheck (vBs, vs, done) =
  match vBs, vs .
  + []    , _       . done!() . _0
  + v::vBs, v'::vs  . if v=v' then AliceCheck (vBs, vs, done) else Bad () fi
  + _               . Bad ()

proc Reconcile (bBs,bvs,vs,done) =
  match bBs, bvs .
  + []     , []         . (done!rev vs . _0)
  + bB::bBs, (b,v)::bvs . Reconcile (bBs, bvs, if bB=b then v::vs else vs fi, done)
  + _                   . Stop (["Reconcile failure"])
  
proc Stop (ss) = out!(ss @ ["\n"]) . _0

proc Bad () = Stop (["interference detected -- everything stops"])
proc Good (vs) = Stop (["Alice's code is "; show vs])

proc Bob(n:num, r:^bit, qA, bsA) = 
    (new done) 
    | BobReceive(n,[],qA,r,done)
    | done?(bvs)      . (* bvs is what I saw *)
      out!["Bob saw "; show bvs; "\n"] .
      bsA?(bAs)       . (* receive her bases *)
      out!["Alice sent bases "; show bAs; "\n"] .
      bsA!map fst bvs . (* send my bases *)
      (new done) 
      | Reconcile (bAs,bvs,[],done)
      | done?(vs) . (* the bits we agree on *)
        out!["Bob reconciled "; show vs; "\n"] .
        (let checklength = ceiling ((length vs)/4))
        bsA!take checklength vs . (* send her a sample *)
        (let code = drop checklength vs)
        out!["Bob's code is "; show code; "\n"] .                                
        _0

(* receive qbits down qA, measure them, record the results *)
proc BobReceive(n,bvs,qA,r,done) =
    if n=0 then done!rev bvs . _0
    else qA?(q) .
         r?(basis) .
         q =?[if basis=0b1 then _H else _I fi] (value) .
         BobReceive(n-1,(basis,value)::bvs,qA,r,done)
    fi
       
(* a source of random bits. A bit of a joke, but relatively harmless *)
proc Random(r:^bit) = (newq q=|+>) q=?(v) . r!v . Random(r)

proc System() = (let n = read_num "number of qbits")
                (new r,qc,bsc)
                | Alice(n,r,qc,bsc) | Bob(n,r,qc,bsc) | Random(r)
