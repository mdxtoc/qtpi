proc Alice (x:qbit, c:^bit*bit) = 
    (let init = read_bool "initialised qbit or random" "i" "r")
    if init 
      then
        (let bv = read_alternative "basis" "," ["0",|0>; "1",|1>; "+",|+>; "-",|->])
        (newq z = bv) AliceDoIt (x, c, z)
      else 
        (newq z) AliceDoIt (x, c, z)
    fi

proc AliceDoIt (x:qbit, c:^bit*bit, z:qbit) =
    out!["initially Alice's z is "] . 
    outq!(qval z) . out!["\n"] .
    z,x>>CNot . z>>H . z-/-(vz) . x-/-(vx) . 
    c!vz,vx . 
    _0 

proc Bob(y:qbit, c:^bit*bit) = 
    c?(b1,b2) . 
    y >> match b1,b2 . + 0b0,0b0 . I
                       + 0b0,0b1 . X
                       + 0b1,0b0 . Z
                       + 0b1,0b1 . Z*X    .
    out!["finally Bob's y is "] . 
    outq!(qval y) . out!["\n"] .
    _0 

proc System () = 
  (newq x=|+>, y=|0>) x,y>>CNot . 
  (new c:^bit*bit) | Alice(x,c) | Bob(y,c)
