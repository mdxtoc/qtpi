proc Bob(nq,qc,ic,bc,logc) = 
  (new rc)
    | BobRead (nq,qc,rc,[]) 
    | rc?(bvs) .
      (let bs = map fst bvs)
      ic?(bAs)  .
      ic!bs     .
      (let bAbvs = combine bAs bvs)
      (let vBs = sanitise bAbvs)
      bc?(vAs)  .
      bc!vBs    .
      bc?(go)   .
      if bit2bool (hd go) then (* Alice says ok *)
        if not (check bs bAs vBs vAs (3,2) && check bs bAs vBs vAs (1,2)) then (* we have interference *)
          bc![bool2bit false] .
          out!["Bob detects interference\n"] .
          logc![] .
          _0
        else (* All is well *)
          bc![bool2bit true]  .
          (let key = map (compose inverse snd) (filter (lam ((b,b'),v') . b=b') bAbvs))
          bc?(encrypted) .
          (let message = xor_mask (take (length encrypted) key) encrypted)
          (* out!["Bob receives "; show message; "\n"] . *)
          logc!message .
          _0
        fi
      else
        logc![] .
        _0
      fi

proc BobRead (nq,qc,rc,bvs) = 
  if nq=0 then rc!rev bvs . _0
  else
    qc?(q) . (new r)| BobMeasure (q,r) | r?(bv) . BobRead (nq-1,qc,rc,bv::bvs)
  fi

proc BobMeasure (q,r) =
  match rand4() .
    + 1 . q=?[_F]   (b) . r!1,b . _0
    + 2 . q=?[_H]    (b) . r!2,b . _0
    + 3 . q=?[_G](b) . r!3,b . _0
    + _ . BobMeasure (q,r) (* 0 - try again *)
