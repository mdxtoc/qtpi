(* a sophisticated eavesdropper. Plays Bob to Alice, Alice to Bob *)

proc Eve (qcA, qcB, bcA, bcB, againA, againB, logAE, logEB) =
    (new copied) 
    (  CopyBits([],qcA,qcB,bcA,copied)
     | copied?(bs)                      .   (* bs, vs are what I _sent_ *)
       copied?(vs)                      .
       logEB!bs                         .
       logEB!vs                         .
      
       copied?(basesA) . bcA!bs         .   (* send my bases to Alice *)
        
       EveLoop (qcA, qcB, bcA, bcB, againA, againB, bs, vs, bs, vs, basesA, logAE, logEB)
    )
       
proc EveLoop (qcA, qcB, bcA, bcB, againA, againB, bsA, vsA, bsB, vsB, basesA, logAE, logEB) =
   bcB!bsB . bcB?(basesB)               .   (* send my bases to Bob; receive his in return *)
   (let rvsB = reconcile basesB bsB vsB)
   bcB?(maskB) . bcB?(checkbitsB)       .   (* receive Bob's mask and check bits *)
                                            (* but ignore his check bits *)
   logEB!checkbitsB                     .
   (let codeB = mask_filter 0b0 maskB rvsB)
   (* if Alice has more code bits than Bob then she might send me a message
      that I couldn't recrypt. So make sure that doesn't happen.
    *)
   (let rvsA = reconcile bsA basesA vsA)
   (let diff = length rvsA - length codeB)
   if diff>=0 then
     (* fake a mask to give Alice the same number of code bits as Bob *)
     (let maskA = tabulate diff (const 0b1) @ tabulate (length codeB) (const 0b0))
     bcA!maskA                          .   (* send Alice the mask and checkbits *)
     bcA!mask_filter 0b1 maskA rvsA     .
     (    againA?(_)                    .   (* Alice didn't get enough code bits *)
            againB!()                   .   (* round again, Bob *)
            logAE![bool2bit true]       .   (* going round again *)
            logEB![bool2bit true]       .   (* both of us *)
            Eve (qcA, qcB, bcA, bcB, againA, againB, logAE, logEB)
      <+> bcA?(encrypted)               .   (* receive her coded message *)
            logAE![bool2bit false]      .   (* not going round again *) 
            logEB![bool2bit false]      .   (* either of us    *)   
            logAE!encrypted             .
            (let codeA = mask_filter 0b0 maskA rvsA)
            (let message = xor_mask (take (length encrypted) codeA) encrypted)
                                            (* decode as Bob would *)
            logEB![bool2bit true]       .   (* I got the message *)
            logEB!message               .
            bcB!xor_mask (take (length message) codeB) message       
                                        .   (* encode for Bob as Alice would and send it to him *)
            _0
     )
   else                                     (* too many code bits with Bob *)
      againB!()                         .   (* round again, Bob *)
      logEB![bool2bit true]             .
      (* in case Bob is suspicious, send him new qbits *)
      (let bs = randbits (length bsB))
      (let vs = randbits (length bsB))
      (new sent)
      (  SendBits (zip bs vs, qcB, sent)
       | sent?(_)                       .
         logEB!bs                       .  
         logEB!vs                       .
         EveLoop (qcA, qcB, bcA, bcB, againA, againB, bsA, vsA, bs, vs, basesA, logAE, logEB)
      )
   fi
  
proc CopyBits (bvs, qcA, qcB, bcA, result) =
        qcA?(q)                                  . 
            (let b = randbit ())
            q=?[if b=0 then _I else _H fi](v)   . 
            qcB!q                                . 
            CopyBits ((b,v)::bvs, qcA, qcB, bcA, result)
    <+> bcA?(basesA)                            . 
            (let bvs = rev bvs)
            result!map fst bvs                  . 
            result!map snd bvs                  . 
            result!basesA                       .
            _0

