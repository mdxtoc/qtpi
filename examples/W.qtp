(* W-state algorithm taken from 
    the Q# Kata on superposition
    (https://github.com/microsoft/QuantumKatas/blob/master/Superposition/ReferenceImplementation.qs), 
    task 16, WState_PowerOfTwo_Reference
 *)

fun ixs k = tabulate k (λ i. i)

fun powerceiling b n =
  pwc 1
  where pwc c = if c>=n then c else pwc (b*c)

proc W (c,n) = 
  if   n<=0 then (let _ = abandon ["W "; show n; " is impossible"]) . _0
  elsf n=1  then (newqs qs = |1>) c!qs . _0
  else . (let k = floor (n/2)) 
       . (new c1) 
       | W (c1,k)     
       | . c1?(q0s)      
         . out!["W "; show n; " working\n"]
         . (newqs q1s = |0>⊗⊗(n-k))   
         . out!["W "; show n; " has partner\n"]
         . (newq anc = |+>)        
         . [i←ixs k: anc,q0s↓i,q1s↓i>>F . out!["."] . _0] 
         . out!["W "; show n; " has done F\n"]
         . [i←ixs k: q1s↓i,anc>>CNot . out!["."] . _0] 
         . out!["W "; show n; " has done CNot\n"]
         . dispose!anc
         . (joinqs q0s, q1s → qs)
         . c!qs
         . _0

proc Wmake (c,n) =
  (let k = powerceiling 2 n)
  | W (c,k)
  | . c?(qs)
    . out!["W "; show k; " = "] . outq!qvals qs . out!["\n"]
    . if k=n then _0
      else 
        . out!["discarding "; show (k-n); " qbits\n"]
        . (splitqs qs → q0s(k-n),qs)
        . q0s⌢⃫(bs)
        . out!["extras measured "; show bs; ", and now we have "] . outq!qvals qs . out!["\n"]
        . if forall (λ b . b=0b0) bs then _0 else Wmake (c,n)  
               

proc System () =
  . (new c)
  . (let n = read_num "how many qbits") 
  . Wmake (c,n)
