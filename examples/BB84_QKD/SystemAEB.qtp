proc 
  Experiment (M, N, c, w, hksAE, hksEB, logA, logAE, logEB, logB) = 
    (new qcAE,qcEB,bscAE,bscEB)
    | Alice (M, N, w, hksAE, qcAE, bscAE, logA) 
    | Eve   (N, c, w, hksAE, hksEB, qcAE, qcEB, bscAE, bscEB, logAE, logEB) 
    | Bob   (N, c, w, hksEB, qcEB, bscEB, logB)

  System() = 
    (let m = read_min_int 1 "length of message")
    (let c = read_min_int 0 "minimum number of checkbits")
    (let w = read_min_int 0 "length of a hash key")
    (let nSigma = read_min_int 0 "number of sigmas")
    (let k = read_min_int 1 "number of trials")
    (let verbose = read_bool "with commentary" "y" "n")
    (* Decide on a number of qbits large enough to generate the code bits to encrypt M, 
       plus enough to generate 5 Wegman-Carter hash keys (each w bits, one for each protocol 
       message). We don't want the protocol to fail because we pick too few qbits, and 
       nSigma is the number of standard deviations we want to be away from that possibility.
   
       For the basis of the calculation in min_qbits, see QKD_results.md 
     *)
    . (let cmin = c+nSigma*sqrt c) 
    . (let N = min_qbits (m+cmin+nSigma*sqrt c+5*w) nSigma)  
    . Run (k, verbose, N, m, cmin, w)

           
  Run (k, verbose, N, m, c, w) = 
    (let hkbs = randbits (5*w))
    Logger (k, 0, verbose, 0,  0, 0, 0,
                           [], [], [],
                           N, m, c, w, hkbs, hkbs)

  Logger (k, i, verbose, nAlice, nEve, nShort, nEvades,
                                 ncAs, ncBs, evasions,
                                 N, m, c, w, hkbsAE, hkbsEB) =
    if i<k then 
      . out!if k<>1 then ["trial number "; show (i+1); 
                                  if verbose then "\n" else " "]
                    else []
      . (let M = randbits m)
      . out!if verbose then ["message is "; show M; "\n"] else []
      . (new logA,logAE,logEB,logB,doneA,doneB,doneE)
      . (let (hksAE, hksEB) = (map bits2num (packets [] w hkbsAE),
                               map bits2num (packets [] w hkbsEB))
        )
      . out!if verbose then ["hash keys are (A<->E) "; show hksAE; 
                                          " (E<->B) "; show hksEB;
                                                "\n"] 
                       else [] 
      . | Experiment (M, N, c, w, hksAE, hksEB, logA, logAE, logEB, logB) 
        | LogAlice (verbose, logA, doneA)
        | LogBob (verbose, logB, doneB)
        | LogEve (verbose, logAE, logEB, doneE)
        | . doneA?(nbA, ncA, c_intfseenA, q_intfseen, enough, hkbsA, messageA)
          . doneB?(ncB, messageB, c_intfseenB, hkbsB)
          . doneE?(hkbsAE', (decodeE, messageE, _, hkbsEB'))
          . (let intfseen = q_intfseen || c_intfseenA || c_intfseenB)
          . if ¬intfseen && enough && hkbsA<>hkbsAE' && hkbsAE'<>[]
             then . out!["whoops! different new hash keys A<->E ";
                                         show (packets [] w hkbsA); " ";
                                         show (packets [] w hkbsAE')
                                        ] 
                  . _0
             elif ¬intfseen && enough && hkbsB<>hkbsEB' && hkbsEB'<>[]
               then . out!["whoops! different new hash keys E<->B ";
                                         show (packets [] w hkbsEB'); " ";
                                         show (packets [] w hkbsB)
                                        ] 
                    . _0
             elif ¬enough then
                  Logger (k, i, verbose, nAlice, nEve, nShort+1, nEvades, ncAs, ncBs, evasions, 
                          N, m, c, w, hkbsAE, hkbsEB
                         )
             else . (let evewins = decodeE && ¬intfseen && messageE=messageA)
                  . (let evades = ¬intfseen)
                  . (let nEvades = if evades then nEvades+1 else nEvades)
                  . out!if evewins then ["Eve wins -- "; show ncA; " check bits E->A; "; show ncB; " check bits B->E\n"]
                                   else []
                  . out!if i+1=k then [show nbA; " qbits"; if k=1 then "\n" else " per trial\n"]
                                 else []
                  . (let (nAlice, nEve) = if   intfseen then (nAlice+1, nEve  )   (* Alice spotted Eve *)
                                          elif evewins  then (nAlice  , nEve+1)   (* Alice didn't spot Eve, and Eve saw the message *)
                                          else               (nAlice  , nEve  )   (* somehow Eve was missed, but she didn't see the message *)
                    )
                  . (let (hkbsAE, hkbsEB) = if intfseen                 then (k, k) where k = randbits (5*w)
                                            elif hkbsA=[] || hkbsB=[]   then (hkbsAE, hkbsEB)
                                                                        else (hkbsA, hkbsB)
                    )
                  . Logger (k, i+1, verbose, nAlice, nEve, nShort, nEvades,
                                               ncA::ncAs, ncB::ncBs, evades::evasions,
                                               N, m, c, w, hkbsAE, hkbsEB)
    else . out!["all done: "; 
                show nEve;                " Eve's; ";
                show nAlice;              " Alice's; ";
                show nEvades;             " successful evasions; ";
                show nShort;              " short codebits; ";
                "average check bits (Alice/Eve) "  ; showf 2 (listsum ncAs/k); 
                "; minimum check bits (Alice/Eve) "; show (listmin ncAs); 
                "; average check bits (Eve/Bob) "  ; showf 2 (listsum ncBs/k); 
                "; minimum check bits (Eve/Bob) "  ; show (listmin ncBs); "\n";
                "histogram of check-bit lengths (Alice/Eve) "; show (histogram (compare : num->num->num) ncAs); "\n";
                "histogram of check-bit lengths (Eve/Bob) "; show (histogram (compare : num->num->num) ncBs); "\n";
                "histogram of evasions "; show (histogram2 (compare : num->num->num) (zip ncAs evasions)); "\n"
               ] 
         . _0 
