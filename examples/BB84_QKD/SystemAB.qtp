proc Experiment (M, w, hks, cMin, nSigma, logA, logB) = 
  (new qc,bsc,again)
  | Alice (M,w,hks,cMin,nSigma,qc,bsc,again,logA) 
  | Bob   (w,hks,qc,bsc,again,logB)
    
proc System() = (let n = read_min_int 1 "length of message")
                (let w = read_min_int 0 "length of a hash key")
                (let cMin = read_min_int 0 "minimum number of checkbits")
                (let nSigma = read_min_int 0 "number of sigmas")
                (let k = read_min_int 1 "number of trials")
                (let verbose = read_bool "with commentary" "y" "n")
                Run (k, verbose, n, w, cMin, nSigma)
           
proc Run (k, verbose, n, w, cMin, nSigma) = 
  (let hks = tabulate 5 (lam _ . bits2int (randbits w)))
  Logger (k, 0, verbose, 0, 0, 0, [], n, w, hks, cMin, nSigma)

proc Logger (k, i, verbose, nOk, nIntf, nReps, ncAs, n, w, hks, cMin, nSigma) =
  if i<k then 
    {if k<>1 then print_strings ["trial number "; show (i+1); 
                                   if verbose then "\n" else " " fi] 
               else () fi
      } .
      {if verbose then print_strings ["hash keys are "; show hks; "\n"] else () fi} .
      (let M = randbits n)
      {if verbose then print_strings ["message is "; show M; "\n"] else () fi} .
      (new logA, logB, doneA, doneB)
      | Experiment (M, w, hks, cMin, nSigma, logA, logB) 
      | LogAlice (0, verbose, logA, doneA)
      | LogBob (0, verbose, logB, doneB)
      | doneA?(q_intfseen, nb, ncA, c_intfseenA, hkbsA, repsA)   .
        doneB?(_, messageB, c_intfseenB, hkbsB, _)       .
        (let intfseen = q_intfseen || c_intfseenA || c_intfseenB)
        {if not intfseen && hkbsA<>hkbsB
          then print_strings ["whoops! different new hash keys ";
                              show (packets [] w hkbsA); " ";
                              show (packets [] w hkbsB)
                             ]
         else () fi
        } .
        {if i+1=k then print_strings [show nb; " qbits";
                                       if k=1 then "\n" else " per trial\n" fi
                                      ]
         else () fi
        } .
        (let nIntf = if intfseen then nIntf+1 else nIntf fi)
        (let nOk = if not q_intfseen && messageB=M then nOk+1 else nOk fi)
        (let hkbits = if not intfseen && hkbsA=hkbsB then hkbsA else randbits (5*w) fi)
        (let hks = map bits2int (packets [] w hkbits))
        Logger (k, i+1, verbose, nOk, nIntf, nReps+repsA, ncA::ncAs, n, w, hks, cMin, nSigma)
  else {print_strings ["all done: "; 
                       show nIntf;          " interfered with; ";
                       show nOk;            " exchanges succeeded; ";
                       show (k-nOk);        " failed; ";
                       show nReps;          " repetition(s); ";
                       "average check bits " ; show (listsum ncAs/k); 
                       " minimum check bits "; show (listmin ncAs); "\n";
                       "histogram of check-bit lengths "; show (histogram ncAs); "\n"
                      ]
       } . 
       _0 
  fi
