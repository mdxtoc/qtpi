proc LogBob (reps, verbose, log, done) =
    log?(bs) .
    log?(vs) .
    {if verbose then print_strings ["Bob saw "; show (length bs);
                                    " pairs: "; show (zip bs vs); "\n"] else () fi} .
    log?(bAs)  .
    {if verbose then print_strings ["Bob received "; show (length bAs);
                                    " bases "; show bAs; "\n"] else () fi} .
    log?(bBs)  .
    {if verbose then print_strings ["Bob sent "; show (length bBs);
                                    " bases "; show bBs; "\n"] else () fi} .
    log?(rvs) .
    {if verbose then print_strings ["Bob reconciled "; show rvs; "\n"] else () fi} .
    log?(mask) .
    {if verbose then print_strings ["Bob sent check-bit mask "; show mask; "\n"] else () fi} .
    log?(cs)  .
    {if verbose then print_strings ["Bob sent check bits "; show cs; "\n"] else () fi} .
    log?(again) .
    if bit2bool (hd again) then
      {print_string  "Bob goes round again\n"} .
      LogBob (reps+1, verbose, log, done)
    else
      log?(encrypted) .
      {if verbose then print_strings ["Bob receives encrypted "; show encrypted; "\n"] else () fi} . 
      log?(code) .
      {if verbose then print_strings ["Bob's code is "; show code; "\n"] else () fi} .
      log?(M) .
      {if verbose then print_strings ["Bob decodes message "; show M; "\n"] else () fi} . 
      done!length cs, M, reps .
      _0
    fi
