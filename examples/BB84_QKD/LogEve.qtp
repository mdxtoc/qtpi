
proc 
  LogEve (verbose, logAE, logEB, done) =
    (new doneAE, doneEB)
    | LogAliceEve (verbose, logAE, doneAE)
    | LogEveBob (verbose, logEB, doneEB)
    | doneAE?(resultAE)      .
      doneEB?(resultEB)      .
      done!resultAE,resultEB .
      
  
  LogAliceEve (verbose, log, done) = 
    log?(encrypted:[bit])     .
    out!if verbose then ["Eve (as Bob) sees encrypted "; show encrypted; "\n"] 
                   else []
                        .
    log?(code:[bit])          .
    out!if verbose then ["Eve's code with Alice is "; show code; "\n"] 
                   else []
                        .
    log?(hkbsAE)        .
    done!hkbsAE         .
    

  LogEveBob (verbose, log, done) = 
    log?(bs)              .
    log?(vs)              .
    out!if verbose then ["Eve (as Alice) sent "; show (length bs); 
                         " pairs: "; show (zip bs vs); "\n"] 
                   else []
                          .
    log?(cs)              .
    out!if verbose then ["Eve (as Alice) saw "; show (length cs); 
                         " checkbits from Bob: "; show cs; "\n"] 
                   else []
                          .
    log?(decoded)          .
    (let decoded = bit2bool (hd decoded))
    log?(message)       .
    out!if verbose && decoded then ["Eve decodes message "; show message; "\n"] 
                              else []
                        .
    log?(hkbsEB) .
    done!decoded, message, length cs, hkbsEB .
    
